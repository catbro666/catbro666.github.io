<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CatBro&#39;s Blog</title>
  <icon>https://catbro666.github.io/icon.png</icon>
  <subtitle>Volar con el viento</subtitle>
  <link href="https://catbro666.github.io/atom.xml" rel="self"/>
  
  <link href="https://catbro666.github.io/"/>
  <updated>2021-06-26T12:27:59.282Z</updated>
  <id>https://catbro666.github.io/</id>
  
  <author>
    <name>猫猫哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多进程性能测试程序demo</title>
    <link href="https://catbro666.github.io/posts/e416d910/"/>
    <id>https://catbro666.github.io/posts/e416d910/</id>
    <published>2021-06-26T12:17:38.000Z</published>
    <updated>2021-06-26T12:27:59.282Z</updated>
    
    
    <summary type="html">&lt;div class=&quot;note primary&quot;&gt;
            &lt;p&gt;在工作中经常碰到需要写一些多进程/多线程的测试程序，用来测试接口的性能。本文将会从零开始一点点增加代码，最终完成一个简易的多进程测试程序编写。该程序支持实时打印测试进结果和最终测试结果的统计。&lt;/p&gt;&lt;p&gt;同时，本文还涵盖了以下知识点，可以作为学习参考：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;使用&lt;code&gt;getopt_long()&lt;/code&gt;处理命令行选项和参数&lt;/li&gt;&lt;li&gt;使用&lt;code&gt;fork()&lt;/code&gt;和&lt;code&gt;wait()&lt;/code&gt;处理多进程&lt;/li&gt;&lt;li&gt;使用&lt;code&gt;sigaction()&lt;/code&gt;配合&lt;code&gt;alarm()&lt;/code&gt;处理定时信号&lt;code&gt;SIGALRM&lt;/code&gt;&lt;/li&gt;&lt;li&gt;使用&lt;code&gt;shmget()&lt;/code&gt;、&lt;code&gt;shmat()&lt;/code&gt;、&lt;code&gt;shmdt()&lt;/code&gt;、&lt;code&gt;shmctl()&lt;/code&gt;等通过共享内存进行进程间通信&lt;/li&gt;&lt;li&gt;使用&lt;code&gt;sigaction()&lt;/code&gt;捕获&lt;code&gt;SIGINT&lt;/code&gt;和&lt;code&gt;SIGQUIT&lt;/code&gt;信号，在程序终止前做共享内存清理工作&lt;/li&gt;&lt;/ul&gt;
          &lt;/div&gt;</summary>
    
    
    
    <category term="技术向" scheme="https://catbro666.github.io/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
    <category term="多进程" scheme="https://catbro666.github.io/tags/%E5%A4%9A%E8%BF%9B%E7%A8%8B/"/>
    
    <category term="信号" scheme="https://catbro666.github.io/tags/%E4%BF%A1%E5%8F%B7/"/>
    
    <category term="共享内存" scheme="https://catbro666.github.io/tags/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo-NexT Tag 插件的使用</title>
    <link href="https://catbro666.github.io/posts/29bfe8c9/"/>
    <id>https://catbro666.github.io/posts/29bfe8c9/</id>
    <published>2021-06-22T12:13:58.000Z</published>
    <updated>2021-06-26T11:12:07.228Z</updated>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;Tag Plugin&lt;/code&gt; 是一种使 Hexo 支持特殊样式内容的方法。例如，我们无法在标准 Markdown 中显示具有自定义尺寸的图像。然后我们可以使用标签插件来解决它。 Hexo 有很多可以帮助用户的标签。 Hexo 还具有主题接口，使主题能够创建自己的标签。&lt;/p&gt;</summary>
    
    
    
    <category term="工具向" scheme="https://catbro666.github.io/categories/%E5%B7%A5%E5%85%B7%E5%90%91/"/>
    
    
    <category term="Hexo" scheme="https://catbro666.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>UNIX环境高级编程APUE练习4.6-实现类似cp(1)的程序，保留文件中的空洞</title>
    <link href="https://catbro666.github.io/posts/aa99fc97/"/>
    <id>https://catbro666.github.io/posts/aa99fc97/</id>
    <published>2020-01-06T08:49:42.000Z</published>
    <updated>2021-06-26T11:09:28.161Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;1-题面&quot;&gt;&lt;a href=&quot;#1-题面&quot; class=&quot;headerlink&quot; title=&quot;1 题面&quot;&gt;&lt;/a&gt;1 题面&lt;/h2&gt;&lt;p&gt;编写类似&lt;code&gt;cp(1)&lt;/code&gt;的程序，它复制包含空洞的文件，但是不将字节0写到输出文件中去。&lt;/p&gt;
&lt;h2 id=&quot;2-基本思路&quot;&gt;&lt;a href=&quot;#2-基本思路&quot; class=&quot;headerlink&quot; title=&quot;2 基本思路&quot;&gt;&lt;/a&gt;2 基本思路&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;首先要搞清楚空洞的性质以判断一个文件是否有空洞，以及空洞的位置&lt;/li&gt;
&lt;li&gt;知道了空洞的位置之后，读到源文件中的空洞部分时，在目标文件中&lt;code&gt;lseek&lt;/code&gt;相应的长度&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="技术向" scheme="https://catbro666.github.io/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
    <category term="UNIX" scheme="https://catbro666.github.io/tags/UNIX/"/>
    
  </entry>
  
  <entry>
    <title>UNIX环境高级编程APUE练习3.2-不用fcntl实现dup2的功能</title>
    <link href="https://catbro666.github.io/posts/2485f370/"/>
    <id>https://catbro666.github.io/posts/2485f370/</id>
    <published>2019-12-17T09:52:09.000Z</published>
    <updated>2021-06-26T11:09:03.174Z</updated>
    
    
    <summary type="html">&lt;h2 id=&quot;题面&quot;&gt;&lt;a href=&quot;#题面&quot; class=&quot;headerlink&quot; title=&quot;题面&quot;&gt;&lt;/a&gt;题面&lt;/h2&gt;&lt;p&gt;编写与&lt;code&gt;dup2&lt;/code&gt;功能相同的函数，要求不调用&lt;code&gt;fcntl&lt;/code&gt;函数，并且要有正确的出错处理。&lt;/p&gt;
&lt;h2 id=&quot;基本思路&quot;&gt;&lt;a href=&quot;#基本思路&quot; class=&quot;headerlink&quot; title=&quot;基本思路&quot;&gt;&lt;/a&gt;基本思路&lt;/h2&gt;&lt;p&gt;不能用&lt;code&gt;fcntl&lt;/code&gt;，能够返回一个文件描述符的只有&lt;code&gt;open&lt;/code&gt;和&lt;code&gt;dup&lt;/code&gt;。而&lt;code&gt;open&lt;/code&gt;会创建一个新的文件表项，返回的fd指向新的文件表项，与&lt;code&gt;dup2&lt;/code&gt;的表现不符。&lt;code&gt;dup&lt;/code&gt;基本能满足要求，但是返回的是最小的可用fd，需要进一步操作满足要求。另外需要自己添加错误处理，以及处理oldfd与newfd相等的情况等。具体地，&lt;/p&gt;</summary>
    
    
    
    <category term="技术向" scheme="https://catbro666.github.io/categories/%E6%8A%80%E6%9C%AF%E5%90%91/"/>
    
    
    <category term="UNIX" scheme="https://catbro666.github.io/tags/UNIX/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://catbro666.github.io/posts/4a17b156/"/>
    <id>https://catbro666.github.io/posts/4a17b156/</id>
    <published>2019-06-07T08:49:42.000Z</published>
    <updated>2021-06-21T14:38:56.931Z</updated>
    
    
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
