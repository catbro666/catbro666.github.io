<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UNIX环境高级编程APUE练习3.2-不用fcntl实现dup2的功能</title>
    <url>/posts/2485f370/</url>
    <content><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>编写与dup2功能相同的函数，要求不调用fcntl函数，并且要有正确的出错处理。</p>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>不能用fcntl，能够返回一个文件描述符的只有open和dup。而open会创建一个新的文件表项，返回的fd指向新的文件表项，与dup2的表现不符。dup基本能满足要求，但是返回的是最小的可用fd，需要进一步操作满足要求。另外需要自己添加错误处理，以及处理oldfd与newfd相等的情况等。具体地，</p>
<a id="more"></a>

<ol>
<li>当dup返回出错时，直接返回出错</li>
<li>当dup返回值等于newfd时，直接返回</li>
<li>当dup返回值小于newfd时，记录返回值，循环调用dup直到返回值等于newfd。关闭前面记录的所有fd，返回newfd</li>
<li>当dup返回值大于newfd时，关闭返回值的fd。如果oldfd等于newfd，直接返回newfd;如果不相等，关掉newfd，然后再dup（因为不是原子的，返回值需要再判断）</li>
</ol>
<h2 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h2><ol>
<li>oldfd的出错处理可以直接交给dup</li>
<li>newfd的出错处理，需要判断是否超出文件描述符范围(RLIMIT_NOFILE in getrlimit)</li>
<li>对于dup返回EMFILE的情况，newfd如果没超过进程可打开的最大文件数，则不影响</li>
<li>另外还有一个判断顺序问题，是先判断参数是否合法还是oldfd==newfd, 这个可以根据dup2函数实测来确定</li>
</ol>
<h2 id="4-测试用例"><a href="#4-测试用例" class="headerlink" title="4 测试用例"></a>4 测试用例</h2><h3 id="进程打开的文件数没满的情况下"><a href="#进程打开的文件数没满的情况下" class="headerlink" title="进程打开的文件数没满的情况下"></a>进程打开的文件数没满的情况下</h3><ol>
<li>都超出范围，相同（MAX+1，MAX+1）</li>
<li>未打开描述符，相同 (100, 100)</li>
<li>newfd超出范围 (1, MAX+1)</li>
<li>newfd正好没超出 (1, MAX)</li>
<li>oldfd和newfd相同 (2, 2)</li>
</ol>
<h3 id="进程打开的文件数满的情况下"><a href="#进程打开的文件数满的情况下" class="headerlink" title="进程打开的文件数满的情况下"></a>进程打开的文件数满的情况下</h3><ol>
<li>newfd正好超出范围 (1, MAX+1)</li>
<li>newfd正好没超出 (1, MAX)</li>
<li>oldfd和newfd相同 (2, 2)</li>
</ol>
<h2 id="5-开始撸码实测"><a href="#5-开始撸码实测" class="headerlink" title="5 开始撸码实测"></a>5 开始撸码实测</h2><h3 id="5-1-先验证dup2的判断顺序问题"><a href="#5-1-先验证dup2的判断顺序问题" class="headerlink" title="5.1 先验证dup2的判断顺序问题"></a>5.1 先验证dup2的判断顺序问题</h3><ul>
<li>测试源码</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=&#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NOFILE limits: soft=%lld; hard=%lld\n"</span>,</span><br><span class="line">                   (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_cur, (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_max);</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">10000</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2(10000, 10000) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2(10000, 10000) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2(100, 100) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2(100, 100) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2(1, 10000) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2(1, 10000) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2(1, 100) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2(1, 100) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MAC OSX下运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./a.out</span><br><span class="line">NOFILE limits: soft=7168; hard=9223372036854775807</span><br><span class="line">dup2(10000, 10000) fail: : Bad file descriptor</span><br><span class="line">dup2(100, 100) fail: : Bad file descriptor</span><br><span class="line">dup2(1, 10000) fail: : Bad file descriptor</span><br><span class="line">dup2(1, 100) success return 100</span><br></pre></td></tr></table></figure>

<p>可见是参数出错判断是先于oldfd == newfd判断的</p>
<h3 id="5-2-测试进程打开的最大文件数到上限时，dup2是否能成功"><a href="#5-2-测试进程打开的最大文件数到上限时，dup2是否能成功" class="headerlink" title="5.2 测试进程打开的最大文件数到上限时，dup2是否能成功"></a>5.2 测试进程打开的最大文件数到上限时，dup2是否能成功</h3><ul>
<li>测试源码</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> max_fd = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=&#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NOFILE limits: soft=%lld; hard=%lld\n"</span>,</span><br><span class="line">                   (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_cur, (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_max);</span><br><span class="line">    <span class="keyword">while</span>((r = dup(<span class="number">0</span>))!= <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        max_fd = r;</span><br><span class="line">    &#125;</span><br><span class="line">    perror(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max fd is %d\n"</span>, max_fd);</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2(1, 10000) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2(1, 10000) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2(1, 100) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2(1, 100) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MAC OSX下运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./a.out</span><br><span class="line">NOFILE limits: soft=7168; hard=9223372036854775807</span><br><span class="line">Too many open files</span><br><span class="line">max fd is 7167</span><br><span class="line">dup2(1, 7168) fail: : Bad file descriptor</span><br><span class="line">dup2(1, 7167) success return 7167</span><br></pre></td></tr></table></figure>

<p>可见在进程打开文件数达到上限时，dup2替换已经打开的文件是可以的</p>
<h3 id="5-3-实现dup2的功能"><a href="#5-3-实现dup2的功能" class="headerlink" title="5.3 实现dup2的功能"></a>5.3 实现dup2的功能</h3><ul>
<li>源码</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*dup实现dup2的功能*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2_</span><span class="params">(<span class="keyword">int</span> oldfd, <span class="keyword">int</span> newfd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">stack</span>[<span class="number">7168</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=&#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="keyword">if</span> (newfd &lt; <span class="number">0</span> || newfd &gt; old_rlim.rlim_cur - <span class="number">1</span>) &#123;</span><br><span class="line">        errno = EBADF;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        ret = dup(oldfd);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span> &amp;&amp; errno != EMFILE) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">-1</span> &amp;&amp; errno == EMFILE) &#123;</span><br><span class="line">            <span class="keyword">if</span>(oldfd == newfd) &#123;</span><br><span class="line">                <span class="keyword">return</span> newfd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"close(newfd)\n"</span>);</span><br><span class="line">            close(newfd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oldfd == newfd) &#123;</span><br><span class="line">                close(ret);</span><br><span class="line">                <span class="keyword">return</span> newfd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ret == newfd) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ret &lt; newfd) &#123;</span><br><span class="line">                <span class="built_in">stack</span>[count++] = ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                close(ret);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"close(newfd)\n"</span>);</span><br><span class="line">                close(newfd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(count) &#123;</span><br><span class="line">        close(<span class="built_in">stack</span>[--count]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r, max_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=&#123;</span><span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"NOFILE limits: soft=%lld; hard=%lld\n"</span>,</span><br><span class="line">                   (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_cur, (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_max);</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">7168</span>, <span class="number">7168</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(7168, 7168) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(7168, 7168) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(100, 100) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(100, 100) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7168</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(1, 7168) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(1, 7168) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7167</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(1, 7167) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(1, 7167) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(2, 2) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(2, 2) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((r = dup(<span class="number">0</span>))!= <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        max_fd = r;</span><br><span class="line">    &#125;</span><br><span class="line">    perror(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"max fd is %d\n"</span>, max_fd);</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7168</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(1, 7168) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(1, 7168) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7167</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(1, 7167) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(1, 7167) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">"dup2_(2, 2) fail: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dup2_(2, 2) success return %d\n"</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MAC OSX下的运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NOFILE limits: soft=7168; hard=9223372036854775807</span><br><span class="line">dup2_(7168, 7168) fail: : Bad file descriptor</span><br><span class="line">dup2_(100, 100) fail: : Bad file descriptor</span><br><span class="line">dup2_(1, 7168) fail: : Bad file descriptor</span><br><span class="line">dup2_(1, 7167) success return 7167</span><br><span class="line">dup2_(2, 2) success return 2</span><br><span class="line">Too many open files</span><br><span class="line">max fd is 7167</span><br><span class="line">dup2_(1, 7168) fail: : Bad file descriptor</span><br><span class="line">close(newfd)</span><br><span class="line">dup2_(1, 7167) success return 7167</span><br><span class="line">close(newfd)</span><br><span class="line">dup2_(1, 100) success return 100</span><br><span class="line">dup2_(2, 2) success return 2</span><br></pre></td></tr></table></figure>

<p>结果都符合预期</p>
]]></content>
      <categories>
        <category>UNIX</category>
      </categories>
      <tags>
        <tag>UNIX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="noopener" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="noopener" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="noopener" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="noopener" target="_blank">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" rel="noopener" target="_blank">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" rel="noopener" target="_blank">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" rel="noopener" target="_blank">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" rel="noopener" target="_blank">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>UNIX环境高级编程APUE练习4.6-实现类似cp(1)的程序，保留文件中的空洞</title>
    <url>/posts/aa99fc97/</url>
    <content><![CDATA[<h2 id="1-题面"><a href="#1-题面" class="headerlink" title="1 题面"></a>1 题面</h2><p>编写类似cp(1)的程序，它复制包含空洞的文件，但是不将字节0写到输出文件中去。</p>
<h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2 基本思路"></a>2 基本思路</h2><ul>
<li>首先要搞清楚空洞的性质以判断一个文件是否有空洞，以及空洞的位置</li>
<li>知道了空洞的位置之后，读到源文件中的空洞部分时，在目标文件中lseek相应的长度</li>
</ul>
<a id="more"></a>

<h2 id="3-创建空洞文件，同时探索空洞性质"><a href="#3-创建空洞文件，同时探索空洞性质" class="headerlink" title="3 创建空洞文件，同时探索空洞性质"></a>3 创建空洞文件，同时探索空洞性质</h2><p>交替<code>lseek</code>和<code>write</code>，逐渐增大间隔长度。比较文件的大小和实际占用的block数目</p>
<ul>
<li>测试源码</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> holesize[]=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>, <span class="number">4096</span>, <span class="number">8192</span>, <span class="number">16384</span>, <span class="number">32</span>*<span class="number">1024</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> filesize = <span class="number">64</span>*<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, fd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">32</span>*<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">1</span>, <span class="number">32</span>*<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">for</span> (; i&lt; <span class="keyword">sizeof</span>(holesize)/ <span class="keyword">sizeof</span>(<span class="keyword">int</span>); ++i) &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(filename, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">"%s%d"</span>, <span class="string">"holesize"</span>, holesize[i]);</span><br><span class="line">        fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        <span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"open file fail\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; filesize) &#123;</span><br><span class="line">            ret = lseek(fd, holesize[i], SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"lseek fail\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i];</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">"write fail\n"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            count += holesize[i] * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MAC OSX 10.1.4.6测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ll -s</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize1</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize1024</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize128</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize16</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize16384</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize2</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize2048</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize256</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize32</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize32768</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize4</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize4096</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize512</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize64</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize8</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize8192</span><br></pre></td></tr></table></figure>

<p>Mac OSX上创建不了空洞文件，因为默认的文件系统是HFS +，不支持稀疏文件</p>
<ul>
<li>Ubuntu18 4.15.0-60-generic测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ll -s</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize1</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize1024</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize128</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize16</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize16384</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize2</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize2048</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize256</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize32</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize32768</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize4</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize4096</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize512</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize64</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize8</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize8192</span><br></pre></td></tr></table></figure>

<p>4KB以上才实际创建空洞。<br>因为在linux的文件系统中，磁盘分配的最小物理单元为簇。(即使文件大小不足以占用满一簇，该簇空余的磁盘存储仍旧是该文件的)</p>
<p>所以可以根据这个性质，判断文件是否是空洞文件。有空洞的文件，用文件大小计算的block数至少比实际占用的block数大1个簇的block数</p>
<h2 id="如何可移植地获取簇的大小"><a href="#如何可移植地获取簇的大小" class="headerlink" title="如何可移植地获取簇的大小"></a>如何可移植地获取簇的大小</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pagesize = sysconf(_SC_PAGESIZE);</span><br></pre></td></tr></table></figure>

<h2 id="初步实现功能"><a href="#初步实现功能" class="headerlink" title="初步实现功能"></a>初步实现功能</h2><ul>
<li>源码</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_cp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd1 = <span class="number">-1</span>, fd2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> rev = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *start_pos = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">long</span> pagesize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> blocks, blksize, size;</span><br><span class="line">    <span class="keyword">int</span> read_num, write_num, remain_num, current_pos = <span class="number">0</span>, last_zero = <span class="number">-1</span>, last_nonzero = <span class="number">-1</span>, have_holes = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">    fd1 = open(from, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123;</span><br><span class="line">        perror(<span class="string">"open file1 faild"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fstat(fd1, &amp;st) !=<span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fstat: "</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">#ifdef _SC_PAGESIZE</span><br><span class="line">        pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">        <span class="keyword">if</span> (pagesize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">                    <span class="built_in">fputs</span>(<span class="string">" (not supported)\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                    pagesize = st.st_blksize;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    perror(<span class="string">"sysconf error"</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">" (no limit)\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                pagesize = st.st_blksize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pagesize: %ld\n"</span>, pagesize);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        pagesize = st.st_blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        blocks = st.st_blocks;</span><br><span class="line">        blksize = st.st_blksize;</span><br><span class="line">        size = st.st_size;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"st.st_blocks: %lld\n"</span>, blocks);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"st.st_blksize: %lld\n"</span>, blksize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"st.st_size: %lld\n"</span>, size);</span><br><span class="line">        <span class="comment">/*块大小512，在不同平台上可能不兼容*/</span></span><br><span class="line">        <span class="keyword">if</span>(S_ISREG(st.st_mode) &amp;&amp; (size / pagesize + (size%pagesize?<span class="number">1</span>:<span class="number">0</span>)) * pagesize &gt; <span class="number">512</span> * blocks) &#123;</span><br><span class="line">            have_holes = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s is a sparse-block file!\n"</span>, from);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            have_holes = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s is not a sparse-block file!\n"</span>, from);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fd2 = open(to, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">-1</span> == fd2) &#123;</span><br><span class="line">        perror (<span class="string">"open file2 faild"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buffer = <span class="built_in">malloc</span>(pagesize);</span><br><span class="line">    <span class="keyword">if</span>(buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror (<span class="string">"malloc fail"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, pagesize);</span><br><span class="line">    <span class="keyword">while</span>((read_num = read(fd1, buffer, pagesize)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 源文件有空洞 */</span></span><br><span class="line">        <span class="keyword">if</span>(have_holes)&#123;</span><br><span class="line">            last_zero = <span class="number">-1</span>;</span><br><span class="line">            last_nonzero = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(current_pos = <span class="number">0</span>; current_pos &lt; read_num; current_pos++)&#123;</span><br><span class="line">                <span class="comment">/* 逐字节判断，效率较低*/</span></span><br><span class="line">                <span class="keyword">if</span>(buffer[current_pos] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(last_nonzero &gt; last_zero)&#123;</span><br><span class="line">                        remain_num = last_nonzero - last_zero;</span><br><span class="line">                        start_pos = buffer + last_zero + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span>(remain_num)&#123;</span><br><span class="line">                            write_num = write(fd2, start_pos, remain_num);</span><br><span class="line">                            <span class="keyword">if</span> ( <span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                                perror( <span class="string">"write file2 error"</span>);</span><br><span class="line">                                <span class="keyword">goto</span> err;</span><br><span class="line">                            &#125;</span><br><span class="line">                            remain_num -= write_num;</span><br><span class="line">                            start_pos += write_num;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    last_zero = current_pos;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(last_zero &gt; last_nonzero)&#123;</span><br><span class="line">                        remain_num = last_zero - last_nonzero;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="number">-1</span> == lseek(fd2, remain_num, SEEK_CUR))&#123;</span><br><span class="line">                            perror(<span class="string">"lseek file2 fail"</span>);</span><br><span class="line">                            <span class="keyword">goto</span> err;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    last_nonzero = current_pos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 处理最后剩余数据*/</span></span><br><span class="line">            remain_num = (last_nonzero &gt; last_zero)?(last_nonzero - last_zero):(last_zero - last_nonzero);</span><br><span class="line">            start_pos = buffer + current_pos - remain_num;</span><br><span class="line">            <span class="keyword">if</span>(last_nonzero &gt; last_zero)&#123;</span><br><span class="line">                <span class="keyword">while</span>(remain_num)&#123;</span><br><span class="line">                    write_num = write(fd2, start_pos, remain_num);</span><br><span class="line">                    <span class="keyword">if</span> ( <span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                        perror( <span class="string">"write file2 error"</span>);</span><br><span class="line">                        <span class="keyword">goto</span> err;</span><br><span class="line">                    &#125;</span><br><span class="line">                        remain_num -= write_num;</span><br><span class="line">                        start_pos += write_num;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == lseek(fd2, remain_num, SEEK_CUR))&#123;</span><br><span class="line">                    perror(<span class="string">"lseek file2 fail"</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 源文件无空洞 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            remain_num = read_num;</span><br><span class="line">            start_pos = buffer;</span><br><span class="line">            <span class="keyword">while</span>(remain_num)&#123;</span><br><span class="line">                write_num = write(fd2, start_pos, remain_num);</span><br><span class="line">                <span class="keyword">if</span> ( <span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                    perror( <span class="string">"write file2 error"</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">                remain_num -= write_num;</span><br><span class="line">                start_pos += write_num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == read_num) &#123;</span><br><span class="line">        perror(<span class="string">"read file1 error"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    rev = <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">if</span>(buffer) <span class="built_in">free</span>(buffer);</span><br><span class="line">    close(fd1);</span><br><span class="line">    close(fd2);</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s file1 file2\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    my_cp(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./my_cp holesize2048 holesize2048.cp</span><br><span class="line">pagesize: 4096</span><br><span class="line">st.st_blocks: 128</span><br><span class="line">st.st_blksize: 4096</span><br><span class="line">st.st_size: 65536</span><br><span class="line">holesize2048 is not a sparse-block file!</span><br><span class="line">chen@ubuntu18:~/study/apue.3e/exercises/4</span><br><span class="line">^_^$ ./my_cp holesize4096 holesize4096.cp</span><br><span class="line">pagesize: 4096</span><br><span class="line">st.st_blocks: 72</span><br><span class="line">st.st_blksize: 4096</span><br><span class="line">st.st_size: 65536</span><br><span class="line">holesize4096 is a sparse-block file!</span><br><span class="line"></span><br><span class="line">^_^$ ll -s</span><br><span class="line">total 1708</span><br><span class="line">64 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize2048</span><br><span class="line">64 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize2048.cp</span><br><span class="line">36 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize4096</span><br><span class="line">32 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize4096.cp</span><br></pre></td></tr></table></figure>

<p>空洞文件可以正常拷贝</p>
<h2 id="尝试优化程序"><a href="#尝试优化程序" class="headerlink" title="尝试优化程序"></a>尝试优化程序</h2><p>上面的程序仅在判断文件是否含有空洞时利用的空洞的最小限制。而在实际读写时并没有利用该性质。</p>
<p>这样较短的0字节也会当成是空洞，导致系统调用次数的增加，性能的降低</p>
<p>要优化性能，必须进一步探究空洞的性质。在什么样的情况下才创建空洞(不实际占用磁盘空间的块)？</p>
<ul>
<li>测试程序源码</li>
</ul>
<p>此程序创建了3个文件：</p>
<pre><code>- 文件1先`write`了1K的非零数据，然后`lseek` 7K-1字节。循环2次。
- 文件2先`write`了1K的非零数据，然后`lseek` 7K字节。循环2次
- 文件3先`write`了1K的非零数据，然后`lseek` 7K+1字节。循环2次</code></pre><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> holesize[]=&#123;<span class="number">4096</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> filesize = <span class="number">64</span>*<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, fd1 = <span class="number">0</span>, fd2 = <span class="number">0</span>, fd3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> filename1[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> filename2[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> filename3[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">32</span>*<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">1</span>, <span class="number">32</span>*<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">for</span> (; i&lt; <span class="keyword">sizeof</span>(holesize)/ <span class="keyword">sizeof</span>(<span class="keyword">int</span>); ++i) &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(filename1, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">memset</span>(filename2, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">memset</span>(filename3, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename1, <span class="string">"%s%d-1"</span>, <span class="string">"holesize"</span>, holesize[i]);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename2, <span class="string">"%s%d-2"</span>, <span class="string">"holesize"</span>, holesize[i]);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename3, <span class="string">"%s%d-3"</span>, <span class="string">"holesize"</span>, holesize[i]);</span><br><span class="line">        fd1 = open(filename1, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        fd2 = open(filename2, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        fd3 = open(filename3, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        <span class="keyword">if</span>(fd1 &lt; <span class="number">0</span> || fd2 &lt; <span class="number">0</span> || fd3 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"open file fail\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i] * <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd1, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">"write fail\n"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = lseek(fd1, holesize[i] * <span class="number">7</span> / <span class="number">4</span> - <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"lseek fail\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i] * <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd2, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">"write fail\n"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = lseek(fd2, holesize[i] * <span class="number">7</span> / <span class="number">4</span>, SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"lseek fail\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i] * <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd3, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">"write fail\n"</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = lseek(fd3, holesize[i] * <span class="number">7</span> / <span class="number">4</span> + <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"lseek fail\n"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd1);</span><br><span class="line">        close(fd2);</span><br><span class="line">        close(fd3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ll -s</span><br><span class="line">12 -rw-r--r-- 1 chen chen  9215 1月   6 15:07 holesize4096-1</span><br><span class="line"> 8 -rw-r--r-- 1 chen chen  9216 1月   6 15:07 holesize4096-2</span><br><span class="line"> 8 -rw-r--r-- 1 chen chen  9217 1月   6 15:07 holesize4096-3</span><br></pre></td></tr></table></figure>

<p>可见空洞必须从一页的起始位置开始计算,并且等于或超过pagesize，才不占用实际磁盘空间</p>
<h2 id="优化后程序"><a href="#优化后程序" class="headerlink" title="优化后程序"></a>优化后程序</h2><ul>
<li><p>源码</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> read_ex(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbyte)&#123;</span><br><span class="line">    <span class="keyword">size_t</span> read_remain = nbyte;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *read_start = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf;</span><br><span class="line">    <span class="keyword">ssize_t</span> read_num = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> total_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(read_remain) &#123;</span><br><span class="line">        read_num = read(fd, read_start, read_remain);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == read_num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == read_num)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            read_remain -= read_num;</span><br><span class="line">            read_start += read_num;</span><br><span class="line">            total_num += read_num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ssize_t</span> write_ex(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbyte)&#123;</span><br><span class="line">    <span class="keyword">size_t</span> write_remain = nbyte;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_start = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf;</span><br><span class="line">    <span class="keyword">ssize_t</span> write_num = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> total_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(write_remain) &#123;</span><br><span class="line">        write_num = write(fd, write_start, write_remain);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == write_num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            write_remain -= write_num;</span><br><span class="line">            write_start += write_num;</span><br><span class="line">            total_num += write_num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_cp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd1 = <span class="number">-1</span>, fd2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> rev = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer = <span class="literal">NULL</span>, *buffer_zero = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">long</span> pagesize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> blocks, blksize, size;</span><br><span class="line">    <span class="keyword">int</span> read_num, write_num, write_remain, have_holes = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">    fd1 = open(from, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123;</span><br><span class="line">        perror(<span class="string">"open file1 faild"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fstat(fd1, &amp;st) !=<span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">"fstat: "</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">#ifdef _SC_PAGESIZE</span><br><span class="line">        pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">        <span class="keyword">if</span> (pagesize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">                    <span class="built_in">fputs</span>(<span class="string">" (not supported)\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                    pagesize = st.st_blksize;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    perror(<span class="string">"sysconf error"</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">" (no limit)\n"</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                pagesize = st.st_blksize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"pagesize: %ld\n"</span>, pagesize);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        pagesize = st.st_blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        blocks = st.st_blocks;</span><br><span class="line">        blksize = st.st_blksize;</span><br><span class="line">        size = st.st_size;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"st.st_blocks: %lld\n"</span>, blocks);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"st.st_blksize: %lld\n"</span>, blksize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"st.st_size: %lld\n"</span>, size);</span><br><span class="line">        <span class="comment">/*块大小512，在不同平台上可能不兼容*/</span></span><br><span class="line">        <span class="keyword">if</span>(S_ISREG(st.st_mode) &amp;&amp; (size / pagesize + (size%pagesize?<span class="number">1</span>:<span class="number">0</span>)) * pagesize &gt; <span class="number">512</span> * blocks) &#123;</span><br><span class="line">            have_holes = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s is a sparse-block file!\n"</span>, from);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            have_holes = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s is not a sparse-block file!\n"</span>, from);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buffer = <span class="built_in">malloc</span>(pagesize);</span><br><span class="line">    buffer_zero = <span class="built_in">malloc</span>(pagesize);</span><br><span class="line">    <span class="keyword">if</span>(buffer == <span class="literal">NULL</span> || buffer_zero == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror (<span class="string">"malloc fail"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">'\0'</span>, pagesize);</span><br><span class="line">    <span class="built_in">memset</span>(buffer_zero, <span class="string">'\0'</span>, pagesize);</span><br><span class="line"></span><br><span class="line">    fd2 = open(to, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd2) &#123;</span><br><span class="line">        perror (<span class="string">"open file2 faild"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((read_num = read_ex(fd1, buffer, pagesize)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 读取到空洞 */</span></span><br><span class="line">        <span class="keyword">if</span>(have_holes &amp;&amp; !<span class="built_in">memcmp</span>(buffer_zero, buffer, read_num))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == lseek(fd2, read_num, SEEK_CUR))&#123;</span><br><span class="line">                perror(<span class="string">"lseek file2 fail"</span>);</span><br><span class="line">                <span class="keyword">goto</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 非空洞 */</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            write_num = write_ex(fd2, buffer, read_num);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                perror( <span class="string">"write file2 error"</span>);</span><br><span class="line">                <span class="keyword">goto</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == read_num)&#123;</span><br><span class="line">        perror(<span class="string">"read file1 error"</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    rev = <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">if</span>(buffer) <span class="built_in">free</span>(buffer);</span><br><span class="line">    <span class="keyword">if</span>(buffer_zero) <span class="built_in">free</span>(buffer_zero);</span><br><span class="line">    close(fd1);</span><br><span class="line">    close(fd2);</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Usage: %s file1 file2\n"</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    my_cp(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对比测试</p>
</li>
</ul>
<p>构造一个文件，除了开头一个空洞，其余数据为0x00,0x01的100000次重复</p>
<p>用优化前的程序拷贝该文件10000次，大约2000s</p>
<p>用优化后的程序拷贝该文件10000次，大约30s</p>
]]></content>
  </entry>
</search>
