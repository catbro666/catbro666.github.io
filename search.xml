<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>UNIX环境高级编程APUE练习3.2-不用fcntl实现dup2的功能</title>
    <url>/posts/2485f370/</url>
    <content><![CDATA[<h2 id="题面"><a href="#题面" class="headerlink" title="题面"></a>题面</h2><p>编写与<code>dup2</code>功能相同的函数，要求不调用<code>fcntl</code>函数，并且要有正确的出错处理。</p>
<h2 id="基本思路"><a href="#基本思路" class="headerlink" title="基本思路"></a>基本思路</h2><p>不能用<code>fcntl</code>，能够返回一个文件描述符的只有<code>open</code>和<code>dup</code>。而<code>open</code>会创建一个新的文件表项，返回的fd指向新的文件表项，与<code>dup2</code>的表现不符。<code>dup</code>基本能满足要求，但是返回的是最小的可用fd，需要进一步操作满足要求。另外需要自己添加错误处理，以及处理oldfd与newfd相等的情况等。具体地，</p>
<span id="more"></span>

<ol>
<li>当dup返回出错时，直接返回出错</li>
<li>当dup返回值等于newfd时，直接返回</li>
<li>当dup返回值小于newfd时，记录返回值，循环调用dup直到返回值等于newfd。关闭前面记录的所有fd，返回newfd</li>
<li>当dup返回值大于newfd时，关闭返回值的fd。如果oldfd等于newfd，直接返回newfd;如果不相等，关掉newfd，然后再dup（因为不是原子的，返回值需要再判断）</li>
</ol>
<h2 id="出错处理"><a href="#出错处理" class="headerlink" title="出错处理"></a>出错处理</h2><ol>
<li>oldfd的出错处理可以直接交给dup</li>
<li>newfd的出错处理，需要判断是否超出文件描述符范围(<code>RLIMIT_NOFILE</code> in getrlimit)</li>
<li>对于dup返回EMFILE的情况，newfd如果没超过进程可打开的最大文件数，则不影响</li>
<li>另外还有一个判断顺序问题，是先判断参数是否合法还是oldfd==newfd, 这个可以根据dup2函数实测来确定</li>
</ol>
<h2 id="4-测试用例"><a href="#4-测试用例" class="headerlink" title="4 测试用例"></a>4 测试用例</h2><h3 id="进程打开的文件数没满的情况下"><a href="#进程打开的文件数没满的情况下" class="headerlink" title="进程打开的文件数没满的情况下"></a>进程打开的文件数没满的情况下</h3><ol>
<li>都超出范围，相同（MAX+1，MAX+1）</li>
<li>未打开描述符，相同 (100, 100)</li>
<li>newfd超出范围 (1, MAX+1)</li>
<li>newfd正好没超出 (1, MAX)</li>
<li>oldfd和newfd相同 (2, 2)</li>
</ol>
<h3 id="进程打开的文件数满的情况下"><a href="#进程打开的文件数满的情况下" class="headerlink" title="进程打开的文件数满的情况下"></a>进程打开的文件数满的情况下</h3><ol>
<li>newfd正好超出范围 (1, MAX+1)</li>
<li>newfd正好没超出 (1, MAX)</li>
<li>oldfd和newfd相同 (2, 2)</li>
</ol>
<h2 id="5-开始撸码实测"><a href="#5-开始撸码实测" class="headerlink" title="5 开始撸码实测"></a>5 开始撸码实测</h2><h3 id="5-1-先验证dup2的判断顺序问题"><a href="#5-1-先验证dup2的判断顺序问题" class="headerlink" title="5.1 先验证dup2的判断顺序问题"></a>5.1 先验证dup2的判断顺序问题</h3><ul>
<li>测试源码</li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NOFILE limits: soft=%lld; hard=%lld\n&quot;</span>,</span><br><span class="line">                   (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_cur, (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_max);</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">10000</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2(10000, 10000) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2(10000, 10000) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2(100, 100) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2(100, 100) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2(1, 10000) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2(1, 10000) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2(1, 100) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2(1, 100) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li>MAC OSX下运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./a.out</span><br><span class="line">NOFILE limits: soft=7168; hard=9223372036854775807</span><br><span class="line">dup2(10000, 10000) fail: : Bad file descriptor</span><br><span class="line">dup2(100, 100) fail: : Bad file descriptor</span><br><span class="line">dup2(1, 10000) fail: : Bad file descriptor</span><br><span class="line">dup2(1, 100) success return 100</span><br></pre></td></tr></table></figure>

<p>可见是参数出错判断是先于oldfd == newfd判断的</p>
<h3 id="5-2-测试进程打开的最大文件数到上限时，dup2是否能成功"><a href="#5-2-测试进程打开的最大文件数到上限时，dup2是否能成功" class="headerlink" title="5.2 测试进程打开的最大文件数到上限时，dup2是否能成功"></a>5.2 测试进程打开的最大文件数到上限时，dup2是否能成功</h3><ul>
<li>测试源码</li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">int</span> max_fd = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NOFILE limits: soft=%lld; hard=%lld\n&quot;</span>,</span><br><span class="line">                   (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_cur, (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_max);</span><br><span class="line">    <span class="keyword">while</span>((r = dup(<span class="number">0</span>))!= <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        max_fd = r;</span><br><span class="line">    &#125;</span><br><span class="line">    perror(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max fd is %d\n&quot;</span>, max_fd);</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">10000</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2(1, 10000) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2(1, 10000) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2(1, 100) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2(1, 100) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li>MAC OSX下运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./a.out</span><br><span class="line">NOFILE limits: soft=7168; hard=9223372036854775807</span><br><span class="line">Too many open files</span><br><span class="line">max fd is 7167</span><br><span class="line">dup2(1, 7168) fail: : Bad file descriptor</span><br><span class="line">dup2(1, 7167) success return 7167</span><br></pre></td></tr></table></figure>

<p>可见在进程打开文件数达到上限时，dup2替换已经打开的文件是可以的</p>
<h3 id="5-3-实现dup2的功能"><a href="#5-3-实现dup2的功能" class="headerlink" title="5.3 实现dup2的功能"></a>5.3 实现dup2的功能</h3><ul>
<li>源码</li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/resource.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*dup实现dup2的功能*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dup2_</span><span class="params">(<span class="keyword">int</span> oldfd, <span class="keyword">int</span> newfd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">stack</span>[<span class="number">7168</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="keyword">if</span> (newfd &lt; <span class="number">0</span> || newfd &gt; old_rlim.rlim_cur - <span class="number">1</span>) &#123;</span><br><span class="line">        errno = EBADF;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>) &#123;</span><br><span class="line">        ret = dup(oldfd);</span><br><span class="line">        <span class="keyword">if</span>(ret == <span class="number">-1</span> &amp;&amp; errno != EMFILE) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ret == <span class="number">-1</span> &amp;&amp; errno == EMFILE) &#123;</span><br><span class="line">            <span class="keyword">if</span>(oldfd == newfd) &#123;</span><br><span class="line">                <span class="keyword">return</span> newfd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;close(newfd)\n&quot;</span>);</span><br><span class="line">            close(newfd);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(oldfd == newfd) &#123;</span><br><span class="line">                close(ret);</span><br><span class="line">                <span class="keyword">return</span> newfd;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ret == newfd) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(ret &lt; newfd) &#123;</span><br><span class="line">                <span class="built_in">stack</span>[count++] = ret;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                close(ret);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;close(newfd)\n&quot;</span>);</span><br><span class="line">                close(newfd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(count) &#123;</span><br><span class="line">        close(<span class="built_in">stack</span>[--count]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r, max_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">rlimit</span> <span class="title">old_rlim</span>=</span>&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    getrlimit(RLIMIT_NOFILE, &amp;old_rlim);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;NOFILE limits: soft=%lld; hard=%lld\n&quot;</span>,</span><br><span class="line">                   (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_cur, (<span class="keyword">long</span> <span class="keyword">long</span>) old_rlim.rlim_max);</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">7168</span>, <span class="number">7168</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(7168, 7168) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(7168, 7168) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(100, 100) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(100, 100) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7168</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(1, 7168) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(1, 7168) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7167</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(1, 7167) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(1, 7167) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(2, 2) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(2, 2) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>((r = dup(<span class="number">0</span>))!= <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        max_fd = r;</span><br><span class="line">    &#125;</span><br><span class="line">    perror(<span class="literal">NULL</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;max fd is %d\n&quot;</span>, max_fd);</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7168</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(1, 7168) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(1, 7168) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">1</span>, <span class="number">7167</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(1, 7167) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(1, 7167) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    r = dup2_(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(r == <span class="number">-1</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;dup2_(2, 2) fail: &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;dup2_(2, 2) success return %d\n&quot;</span>, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li>MAC OSX下的运行结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">NOFILE limits: soft=7168; hard=9223372036854775807</span><br><span class="line">dup2_(7168, 7168) fail: : Bad file descriptor</span><br><span class="line">dup2_(100, 100) fail: : Bad file descriptor</span><br><span class="line">dup2_(1, 7168) fail: : Bad file descriptor</span><br><span class="line">dup2_(1, 7167) success return 7167</span><br><span class="line">dup2_(2, 2) success return 2</span><br><span class="line">Too many open files</span><br><span class="line">max fd is 7167</span><br><span class="line">dup2_(1, 7168) fail: : Bad file descriptor</span><br><span class="line">close(newfd)</span><br><span class="line">dup2_(1, 7167) success return 7167</span><br><span class="line">close(newfd)</span><br><span class="line">dup2_(1, 100) success return 100</span><br><span class="line">dup2_(2, 2) success return 2</span><br></pre></td></tr></table></figure>

<p>结果都符合预期</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>UNIX</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Hexo-NexT Tag 插件的使用</title>
    <url>/posts/29bfe8c9/</url>
    <content><![CDATA[<p><code>Tag Plugin</code> 是一种使 Hexo 支持特殊样式内容的方法。例如，我们无法在标准 Markdown 中显示具有自定义尺寸的图像。然后我们可以使用标签插件来解决它。 Hexo 有很多可以帮助用户的标签。 Hexo 还具有主题接口，使主题能够创建自己的标签。</p>
<span id="more"></span>

<h2 id="文本居中引用-Centered-Quote"><a href="#文本居中引用-Centered-Quote" class="headerlink" title="文本居中引用 - Centered Quote"></a>文本居中引用 - Centered Quote</h2><p>使用方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% cq %&#125;因为我渺小的心灵里，容不下一个谜，一点悬而未决的东西&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<blockquote class="blockquote-center">
            <i class="fa fa-quote-left"></i>
            <p>因为我渺小的心灵里，容不下一个谜，一点悬而未决的东西</p>

            <i class="fa fa-quote-right"></i>
          </blockquote>



<h2 id="提示块-Note"><a href="#提示块-Note" class="headerlink" title="提示块 - Note"></a>提示块 - Note</h2><p>使用方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">default 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">primary 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">success 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note info %&#125;</span><br><span class="line">info 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">warning 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">danger 提示块标签</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<div class="note default">
            <p>default 提示块标签</p>
          </div>

<div class="note primary">
            <p>primary 提示块标签</p>
          </div>

<div class="note success">
            <p>success 提示块标签</p>
          </div>

<div class="note info">
            <p>info 提示块标签</p>
          </div>

<div class="note warning">
            <p>warning 提示块标签</p>
          </div>

<div class="note danger">
            <p>danger 提示块标签</p>
          </div>



<p>可在主题配置文件中修改风格：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Note tag (bs-callout)</span><br><span class="line">note:</span><br><span class="line">  # Note tag style values:</span><br><span class="line">  #  - simple    bs-callout old alert style. Default.</span><br><span class="line">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class="line">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class="line">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class="line">  style: flat</span><br><span class="line">  icons: true</span><br><span class="line">  # 圆角</span><br><span class="line">  border_radius: 3</span><br><span class="line">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class="line">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>



<h2 id="标签-Label"><a href="#标签-Label" class="headerlink" title="标签 - Label"></a>标签 - Label</h2><p>使用方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% label default@默认 %&#125; &#123;% label primary@主要 %&#125; &#123;% label info@信息 %&#125; &#123;% label warning@警告 %&#125; &#123;% label danger@危险 %&#125; </span><br><span class="line">&#123;% label success@成功%&#125;</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<span class="label default">默认</span> <span class="label primary">主要</span> <span class="label info">信息</span> <span class="label warning">警告</span> <span class="label danger">危险</span> 
<span class="label success">成功</span>

<h2 id="选项卡-Tabs"><a href="#选项卡-Tabs" class="headerlink" title="选项卡 - Tabs"></a>选项卡 - Tabs</h2><p>使用方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs tab, 2 %&#125; 名字为tab，默认显示第1个选项卡，如果是-1则隐藏</span><br><span class="line">&lt;!-- tab 魏国--&gt;</span><br><span class="line">**曹操**</span><br><span class="line"></span><br><span class="line">司马懿 郭嘉 荀彧 荀攸 程昱 杨修 </span><br><span class="line"></span><br><span class="line">典韦 许褚 夏侯渊 夏侯惇 曹仁 于禁 张辽 徐晃</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 蜀国--&gt;</span><br><span class="line">**刘备**</span><br><span class="line"></span><br><span class="line">诸葛亮 庞统 徐庶 姜维 法正 马良</span><br><span class="line"></span><br><span class="line">关羽 张飞 赵云 马超 黄忠 魏延 关兴 张苞</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&lt;!-- tab 吴国 --&gt;</span><br><span class="line">**孙权**</span><br><span class="line"></span><br><span class="line">周瑜 张昭 鲁肃 诸葛瑾 陆逊</span><br><span class="line"></span><br><span class="line">甘宁 太史慈 吕蒙 韩当 黄盖 程普  </span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<div class="tabs" id="tab"><ul class="nav-tabs"><li class="tab"><a href="#tab-1">魏国</a></li><li class="tab active"><a href="#tab-2">蜀国</a></li><li class="tab"><a href="#tab-3">吴国</a></li></ul><div class="tab-content"><div class="tab-pane" id="tab-1"><p><strong>曹操</strong></p>
<p>司马懿 郭嘉 荀彧 荀攸 程昱 杨修 </p>
<p>典韦 许褚 夏侯渊 夏侯惇 曹仁 于禁 张辽 徐晃</p></div><div class="tab-pane active" id="tab-2"><p><strong>刘备</strong></p>
<p>诸葛亮 庞统 徐庶 姜维 法正 马良</p>
<p>关羽 张飞 赵云 马超 黄忠 魏延 关兴 张苞</p></div><div class="tab-pane" id="tab-3"><p><strong>孙权</strong></p>
<p>周瑜 张昭 鲁肃 诸葛瑾 陆逊</p>
<p>甘宁 太史慈 吕蒙 韩当 黄盖 程普  </p></div></div></div>



<p>可在主题配置文件中修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Tabs tag</span><br><span class="line">tabs:</span><br><span class="line">  transition:</span><br><span class="line">    tabs: true</span><br><span class="line">    labels: true</span><br><span class="line">  border_radius: 3</span><br></pre></td></tr></table></figure>

<h2 id="按钮-Button"><a href="#按钮-Button" class="headerlink" title="按钮 - Button"></a>按钮 - Button</h2><p>使用方式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% button url, text, icon [class], [title] %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>url</code>: 本地或外部url</li>
<li><code>text</code>: 显示的文本，文本和图标至少指定一个</li>
<li><code>icon</code>: 显示的图标， FontAwesome 图标名称（开头没有’fa-‘）</li>
<li><code>[class]</code>: FontAwesome 类，可以取如下值<code>fa-fw | fa-lg | fa-2x | fa-3x | fa-4x | fa-5X</code></li>
<li><code>title</code>: 鼠标悬停时的提示信息</li>
</ul>
<p>注意：最好添加 <code>&lt;div&gt;</code> 标签，测试时没加 div，下面显示不完全，加上非常美观。</p>
<p>一个示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;&#123;% button https://catbro666.github.io/ ,首页,home fa-fw,这是我的博客首页%&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<p>效果展示：</p>
<div><a class="btn" href="https://catbro666.github.io/ " title="这是我的博客首页">
            <i class="fa fa-home fa-fw"></i>首页
          </a></div>

<p>多个按钮的时候可以套两层div。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;div class=&quot;text-center&quot;&gt;&lt;div&gt;&#123;% button https://catbro666.github.io/ ,首页,home fa-fw,这是我的博客首页%&#125;&#123;% button https://catbro666.github.io/archives ,归档, archive fa-lg&#125;&lt;/div&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<div class="text-center"><div><a class="btn" href="https://catbro666.github.io/ " title="这是我的博客首页">
            <i class="fa fa-home fa-fw"></i>首页
          </a><a class="btn" href="https://catbro666.github.io/archives ">
            <i class="fa fa-archive fa-lg}</div></div>"></i>归档
          </a>]]></content>
      <categories>
        <category>工具向</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>UNIX环境高级编程APUE练习4.6-实现类似cp(1)的程序，保留文件中的空洞</title>
    <url>/posts/aa99fc97/</url>
    <content><![CDATA[<h2 id="1-题面"><a href="#1-题面" class="headerlink" title="1 题面"></a>1 题面</h2><p>编写类似<code>cp(1)</code>的程序，它复制包含空洞的文件，但是不将字节0写到输出文件中去。</p>
<h2 id="2-基本思路"><a href="#2-基本思路" class="headerlink" title="2 基本思路"></a>2 基本思路</h2><ul>
<li>首先要搞清楚空洞的性质以判断一个文件是否有空洞，以及空洞的位置</li>
<li>知道了空洞的位置之后，读到源文件中的空洞部分时，在目标文件中<code>lseek</code>相应的长度</li>
</ul>
<span id="more"></span>

<h2 id="3-创建空洞文件，同时探索空洞性质"><a href="#3-创建空洞文件，同时探索空洞性质" class="headerlink" title="3 创建空洞文件，同时探索空洞性质"></a>3 创建空洞文件，同时探索空洞性质</h2><p>交替<code>lseek</code>和<code>write</code>，逐渐增大间隔长度。比较文件的大小和实际占用的block数目</p>
<ul>
<li>测试源码</li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> holesize[]=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">64</span>, <span class="number">128</span>, <span class="number">256</span>, <span class="number">512</span>, <span class="number">1024</span>, <span class="number">2048</span>, <span class="number">4096</span>, <span class="number">8192</span>, <span class="number">16384</span>, <span class="number">32</span>*<span class="number">1024</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> filesize = <span class="number">64</span>*<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, fd = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> filename[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">32</span>*<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">1</span>, <span class="number">32</span>*<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">for</span> (; i&lt; <span class="keyword">sizeof</span>(holesize)/ <span class="keyword">sizeof</span>(<span class="keyword">int</span>); ++i) &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(filename, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename, <span class="string">&quot;%s%d&quot;</span>, <span class="string">&quot;holesize&quot;</span>, holesize[i]);</span><br><span class="line">        fd = open(filename, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        <span class="keyword">if</span>(fd &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;open file fail\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; filesize) &#123;</span><br><span class="line">            ret = lseek(fd, holesize[i], SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;lseek fail\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i];</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;write fail\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            count += holesize[i] * <span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li>MAC OSX 10.1.4.6测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ll -s</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize1</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize1024</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize128</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize16</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize16384</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize2</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize2048</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize256</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize32</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize32768</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize4</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize4096</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize512</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize64</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize8</span><br><span class="line">128 -rw-r--r--   1 chenzf  staff  65536 12 28 20:08 holesize8192</span><br></pre></td></tr></table></figure>

<p>Mac OSX上创建不了空洞文件，因为默认的文件系统是HFS +，不支持稀疏文件</p>
<ul>
<li>Ubuntu18 4.15.0-60-generic测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ll -s</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize1</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize1024</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize128</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize16</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize16384</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize2</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize2048</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize256</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize32</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize32768</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize4</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize4096</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize512</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize64</span><br><span class="line">64 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize8</span><br><span class="line">32 -rw-r--r-- 1 chen chen 65536 12月 25 00:08 holesize8192</span><br></pre></td></tr></table></figure>

<p>4KB以上才实际创建空洞。<br>因为在linux的文件系统中，磁盘分配的最小物理单元为簇。(即使文件大小不足以占用满一簇，该簇空余的磁盘存储仍旧是该文件的)</p>
<p>所以可以根据这个性质，判断文件是否是空洞文件。有空洞的文件，用文件大小计算的block数至少比实际占用的block数大1个簇的block数</p>
<h2 id="如何可移植地获取簇的大小"><a href="#如何可移植地获取簇的大小" class="headerlink" title="如何可移植地获取簇的大小"></a>如何可移植地获取簇的大小</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pagesize = sysconf(_SC_PAGESIZE);</span><br></pre></td></tr></table></figure>

<h2 id="初步实现功能"><a href="#初步实现功能" class="headerlink" title="初步实现功能"></a>初步实现功能</h2><ul>
<li>源码</li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_cp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd1 = <span class="number">-1</span>, fd2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> rev = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *start_pos = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">long</span> pagesize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> blocks, blksize, size;</span><br><span class="line">    <span class="keyword">int</span> read_num, write_num, remain_num, current_pos = <span class="number">0</span>, last_zero = <span class="number">-1</span>, last_nonzero = <span class="number">-1</span>, have_holes = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">    fd1 = open(from, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123;</span><br><span class="line">        perror(<span class="string">&quot;open file1 faild&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fstat(fd1, &amp;st) !=<span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fstat: &quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SC_PAGESIZE</span></span><br><span class="line">        pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">        <span class="keyword">if</span> (pagesize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">                    <span class="built_in">fputs</span>(<span class="string">&quot; (not supported)\n&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                    pagesize = st.st_blksize;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    perror(<span class="string">&quot;sysconf error&quot;</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">&quot; (no limit)\n&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                pagesize = st.st_blksize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pagesize: %ld\n&quot;</span>, pagesize);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        pagesize = st.st_blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        blocks = st.st_blocks;</span><br><span class="line">        blksize = st.st_blksize;</span><br><span class="line">        size = st.st_size;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;st.st_blocks: %lld\n&quot;</span>, blocks);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;st.st_blksize: %lld\n&quot;</span>, blksize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;st.st_size: %lld\n&quot;</span>, size);</span><br><span class="line">        <span class="comment">/*块大小512，在不同平台上可能不兼容*/</span></span><br><span class="line">        <span class="keyword">if</span>(S_ISREG(st.st_mode) &amp;&amp; (size / pagesize + (size%pagesize?<span class="number">1</span>:<span class="number">0</span>)) * pagesize &gt; <span class="number">512</span> * blocks) &#123;</span><br><span class="line">            have_holes = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s is a sparse-block file!\n&quot;</span>, from);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            have_holes = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s is not a sparse-block file!\n&quot;</span>, from);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fd2 = open(to, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">    <span class="keyword">if</span> ( <span class="number">-1</span> == fd2) &#123;</span><br><span class="line">        perror (<span class="string">&quot;open file2 faild&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    buffer = <span class="built_in">malloc</span>(pagesize);</span><br><span class="line">    <span class="keyword">if</span>(buffer == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror (<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, pagesize);</span><br><span class="line">    <span class="keyword">while</span>((read_num = read(fd1, buffer, pagesize)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 源文件有空洞 */</span></span><br><span class="line">        <span class="keyword">if</span>(have_holes)&#123;</span><br><span class="line">            last_zero = <span class="number">-1</span>;</span><br><span class="line">            last_nonzero = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">for</span>(current_pos = <span class="number">0</span>; current_pos &lt; read_num; current_pos++)&#123;</span><br><span class="line">                <span class="comment">/* 逐字节判断，效率较低*/</span></span><br><span class="line">                <span class="keyword">if</span>(buffer[current_pos] == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(last_nonzero &gt; last_zero)&#123;</span><br><span class="line">                        remain_num = last_nonzero - last_zero;</span><br><span class="line">                        start_pos = buffer + last_zero + <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">while</span>(remain_num)&#123;</span><br><span class="line">                            write_num = write(fd2, start_pos, remain_num);</span><br><span class="line">                            <span class="keyword">if</span> ( <span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                                perror( <span class="string">&quot;write file2 error&quot;</span>);</span><br><span class="line">                                <span class="keyword">goto</span> err;</span><br><span class="line">                            &#125;</span><br><span class="line">                            remain_num -= write_num;</span><br><span class="line">                            start_pos += write_num;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    last_zero = current_pos;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span>(last_zero &gt; last_nonzero)&#123;</span><br><span class="line">                        remain_num = last_zero - last_nonzero;</span><br><span class="line">                        <span class="keyword">if</span>(<span class="number">-1</span> == lseek(fd2, remain_num, SEEK_CUR))&#123;</span><br><span class="line">                            perror(<span class="string">&quot;lseek file2 fail&quot;</span>);</span><br><span class="line">                            <span class="keyword">goto</span> err;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    last_nonzero = current_pos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* 处理最后剩余数据*/</span></span><br><span class="line">            remain_num = (last_nonzero &gt; last_zero)?(last_nonzero - last_zero):(last_zero - last_nonzero);</span><br><span class="line">            start_pos = buffer + current_pos - remain_num;</span><br><span class="line">            <span class="keyword">if</span>(last_nonzero &gt; last_zero)&#123;</span><br><span class="line">                <span class="keyword">while</span>(remain_num)&#123;</span><br><span class="line">                    write_num = write(fd2, start_pos, remain_num);</span><br><span class="line">                    <span class="keyword">if</span> ( <span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                        perror( <span class="string">&quot;write file2 error&quot;</span>);</span><br><span class="line">                        <span class="keyword">goto</span> err;</span><br><span class="line">                    &#125;</span><br><span class="line">                        remain_num -= write_num;</span><br><span class="line">                        start_pos += write_num;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">-1</span> == lseek(fd2, remain_num, SEEK_CUR))&#123;</span><br><span class="line">                    perror(<span class="string">&quot;lseek file2 fail&quot;</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 源文件无空洞 */</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            remain_num = read_num;</span><br><span class="line">            start_pos = buffer;</span><br><span class="line">            <span class="keyword">while</span>(remain_num)&#123;</span><br><span class="line">                write_num = write(fd2, start_pos, remain_num);</span><br><span class="line">                <span class="keyword">if</span> ( <span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                    perror( <span class="string">&quot;write file2 error&quot;</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">                remain_num -= write_num;</span><br><span class="line">                start_pos += write_num;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == read_num) &#123;</span><br><span class="line">        perror(<span class="string">&quot;read file1 error&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    rev = <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">if</span>(buffer) <span class="built_in">free</span>(buffer);</span><br><span class="line">    close(fd1);</span><br><span class="line">    close(fd2);</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s file1 file2\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    my_cp(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li>测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./my_cp holesize2048 holesize2048.cp</span><br><span class="line">pagesize: 4096</span><br><span class="line">st.st_blocks: 128</span><br><span class="line">st.st_blksize: 4096</span><br><span class="line">st.st_size: 65536</span><br><span class="line">holesize2048 is not a sparse-block file!</span><br><span class="line">chen@ubuntu18:~/study/apue.3e/exercises/4</span><br><span class="line">^_^$ ./my_cp holesize4096 holesize4096.cp</span><br><span class="line">pagesize: 4096</span><br><span class="line">st.st_blocks: 72</span><br><span class="line">st.st_blksize: 4096</span><br><span class="line">st.st_size: 65536</span><br><span class="line">holesize4096 is a sparse-block file!</span><br><span class="line"></span><br><span class="line">^_^$ ll -s</span><br><span class="line">total 1708</span><br><span class="line">64 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize2048</span><br><span class="line">64 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize2048.cp</span><br><span class="line">36 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize4096</span><br><span class="line">32 -rw-r--r-- 1 chen chen  65536 1月   6 17:27 holesize4096.cp</span><br></pre></td></tr></table></figure>

<p>空洞文件可以正常拷贝</p>
<h2 id="尝试优化程序"><a href="#尝试优化程序" class="headerlink" title="尝试优化程序"></a>尝试优化程序</h2><p>上面的程序仅在判断文件是否含有空洞时利用的空洞的最小限制。而在实际读写时并没有利用该性质。</p>
<p>这样较短的0字节也会当成是空洞，导致系统调用次数的增加，性能的降低</p>
<p>要优化性能，必须进一步探究空洞的性质。在什么样的情况下才创建空洞(不实际占用磁盘空间的块)？</p>
<ul>
<li>测试程序源码</li>
</ul>
<p>此程序创建了3个文件：</p>
<pre><code>- 文件1先`write`了1K的非零数据，然后`lseek` 7K-1字节。循环2次。
- 文件2先`write`了1K的非零数据，然后`lseek` 7K字节。循环2次
- 文件3先`write`了1K的非零数据，然后`lseek` 7K+1字节。循环2次
</code></pre>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> holesize[]=&#123;<span class="number">4096</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> filesize = <span class="number">64</span>*<span class="number">1024</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>, fd1 = <span class="number">0</span>, fd2 = <span class="number">0</span>, fd3 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> filename1[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> filename2[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">char</span> filename3[<span class="number">32</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> buf[<span class="number">32</span>*<span class="number">1024</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">memset</span>(buf, <span class="number">1</span>, <span class="number">32</span>*<span class="number">1024</span>);</span><br><span class="line">    <span class="keyword">for</span> (; i&lt; <span class="keyword">sizeof</span>(holesize)/ <span class="keyword">sizeof</span>(<span class="keyword">int</span>); ++i) &#123;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(filename1, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">memset</span>(filename2, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">memset</span>(filename3, <span class="number">0</span>, <span class="number">32</span>);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename1, <span class="string">&quot;%s%d-1&quot;</span>, <span class="string">&quot;holesize&quot;</span>, holesize[i]);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename2, <span class="string">&quot;%s%d-2&quot;</span>, <span class="string">&quot;holesize&quot;</span>, holesize[i]);</span><br><span class="line">        <span class="built_in">sprintf</span>(filename3, <span class="string">&quot;%s%d-3&quot;</span>, <span class="string">&quot;holesize&quot;</span>, holesize[i]);</span><br><span class="line">        fd1 = open(filename1, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        fd2 = open(filename2, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        fd3 = open(filename3, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">        <span class="keyword">if</span>(fd1 &lt; <span class="number">0</span> || fd2 &lt; <span class="number">0</span> || fd3 &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;open file fail\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i] * <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd1, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;write fail\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = lseek(fd1, holesize[i] * <span class="number">7</span> / <span class="number">4</span> - <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;lseek fail\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i] * <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd2, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;write fail\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = lseek(fd2, holesize[i] * <span class="number">7</span> / <span class="number">4</span>, SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;lseek fail\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(count &lt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> remain = holesize[i] * <span class="number">1</span> / <span class="number">4</span>;</span><br><span class="line">            <span class="keyword">while</span>(remain) &#123;</span><br><span class="line">                ret = write(fd3, buf, remain);</span><br><span class="line">                <span class="keyword">if</span>(ret &lt; <span class="number">0</span> ) &#123;</span><br><span class="line">                    perror(<span class="string">&quot;write fail\n&quot;</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                remain -= ret;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = lseek(fd3, holesize[i] * <span class="number">7</span> / <span class="number">4</span> + <span class="number">1</span>, SEEK_CUR);</span><br><span class="line">            <span class="keyword">if</span>(ret &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;lseek fail\n&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ++count;</span><br><span class="line">        &#125;</span><br><span class="line">        close(fd1);</span><br><span class="line">        close(fd2);</span><br><span class="line">        close(fd3);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li>测试结果</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ll -s</span><br><span class="line">12 -rw-r--r-- 1 chen chen  9215 1月   6 15:07 holesize4096-1</span><br><span class="line"> 8 -rw-r--r-- 1 chen chen  9216 1月   6 15:07 holesize4096-2</span><br><span class="line"> 8 -rw-r--r-- 1 chen chen  9217 1月   6 15:07 holesize4096-3</span><br></pre></td></tr></table></figure>

<p>可见空洞必须从一页的起始位置开始计算,并且等于或超过pagesize，才不占用实际磁盘空间</p>
<h2 id="优化后程序"><a href="#优化后程序" class="headerlink" title="优化后程序"></a>优化后程序</h2><ul>
<li>源码</li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/errno.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">read_ex</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbyte)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> read_remain = nbyte;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *read_start = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf;</span><br><span class="line">    <span class="keyword">ssize_t</span> read_num = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> total_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(read_remain) &#123;</span><br><span class="line">        read_num = read(fd, read_start, read_remain);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == read_num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(<span class="number">0</span> == read_num)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            read_remain -= read_num;</span><br><span class="line">            read_start += read_num;</span><br><span class="line">            total_num += read_num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total_num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">ssize_t</span> <span class="title">write_ex</span><span class="params">(<span class="keyword">int</span> fd, <span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">size_t</span> nbyte)</span></span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> write_remain = nbyte;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *write_start = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)buf;</span><br><span class="line">    <span class="keyword">ssize_t</span> write_num = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">ssize_t</span> total_num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(write_remain) &#123;</span><br><span class="line">        write_num = write(fd, write_start, write_remain);</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">-1</span> == write_num)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            write_remain -= write_num;</span><br><span class="line">            write_start += write_num;</span><br><span class="line">            total_num += write_num;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> total_num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_cp</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *from, <span class="keyword">const</span> <span class="keyword">char</span> *to)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd1 = <span class="number">-1</span>, fd2 = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> rev = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> *buffer = <span class="literal">NULL</span>, *buffer_zero = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">long</span> pagesize = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> blocks, blksize, size;</span><br><span class="line">    <span class="keyword">int</span> read_num, write_num, write_remain, have_holes = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">stat</span> <span class="title">st</span>;</span></span><br><span class="line"></span><br><span class="line">    fd1 = open(from, O_RDONLY);</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == fd1)&#123;</span><br><span class="line">        perror(<span class="string">&quot;open file1 faild&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(fstat(fd1, &amp;st) !=<span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;fstat: &quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> _SC_PAGESIZE</span></span><br><span class="line">        pagesize = sysconf(_SC_PAGESIZE);</span><br><span class="line">        <span class="keyword">if</span> (pagesize &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (errno != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (errno == EINVAL) &#123;</span><br><span class="line">                    <span class="built_in">fputs</span>(<span class="string">&quot; (not supported)\n&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                    pagesize = st.st_blksize;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    perror(<span class="string">&quot;sysconf error&quot;</span>);</span><br><span class="line">                    <span class="keyword">goto</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">fputs</span>(<span class="string">&quot; (no limit)\n&quot;</span>, <span class="built_in">stdout</span>);</span><br><span class="line">                pagesize = st.st_blksize;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;pagesize: %ld\n&quot;</span>, pagesize);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">        pagesize = st.st_blksize;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        blocks = st.st_blocks;</span><br><span class="line">        blksize = st.st_blksize;</span><br><span class="line">        size = st.st_size;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;st.st_blocks: %lld\n&quot;</span>, blocks);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;st.st_blksize: %lld\n&quot;</span>, blksize);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;st.st_size: %lld\n&quot;</span>, size);</span><br><span class="line">        <span class="comment">/*块大小512，在不同平台上可能不兼容*/</span></span><br><span class="line">        <span class="keyword">if</span>(S_ISREG(st.st_mode) &amp;&amp; (size / pagesize + (size%pagesize?<span class="number">1</span>:<span class="number">0</span>)) * pagesize &gt; <span class="number">512</span> * blocks) &#123;</span><br><span class="line">            have_holes = <span class="number">1</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s is a sparse-block file!\n&quot;</span>, from);</span><br><span class="line">        &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">            have_holes = <span class="number">0</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s is not a sparse-block file!\n&quot;</span>, from);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    buffer = <span class="built_in">malloc</span>(pagesize);</span><br><span class="line">    buffer_zero = <span class="built_in">malloc</span>(pagesize);</span><br><span class="line">    <span class="keyword">if</span>(buffer == <span class="literal">NULL</span> || buffer_zero == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        perror (<span class="string">&quot;malloc fail&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="string">&#x27;\0&#x27;</span>, pagesize);</span><br><span class="line">    <span class="built_in">memset</span>(buffer_zero, <span class="string">&#x27;\0&#x27;</span>, pagesize);</span><br><span class="line"></span><br><span class="line">    fd2 = open(to, O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR|S_IWUSR|S_IRGRP|S_IROTH);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == fd2) &#123;</span><br><span class="line">        perror (<span class="string">&quot;open file2 faild&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((read_num = read_ex(fd1, buffer, pagesize)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/* 读取到空洞 */</span></span><br><span class="line">        <span class="keyword">if</span>(have_holes &amp;&amp; !<span class="built_in">memcmp</span>(buffer_zero, buffer, read_num))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">-1</span> == lseek(fd2, read_num, SEEK_CUR))&#123;</span><br><span class="line">                perror(<span class="string">&quot;lseek file2 fail&quot;</span>);</span><br><span class="line">                <span class="keyword">goto</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 非空洞 */</span></span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            write_num = write_ex(fd2, buffer, read_num);</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">-1</span> == write_num)&#123;</span><br><span class="line">                perror( <span class="string">&quot;write file2 error&quot;</span>);</span><br><span class="line">                <span class="keyword">goto</span> err;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="number">-1</span> == read_num)&#123;</span><br><span class="line">        perror(<span class="string">&quot;read file1 error&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    rev = <span class="number">0</span>;</span><br><span class="line">err:</span><br><span class="line">    <span class="keyword">if</span>(buffer) <span class="built_in">free</span>(buffer);</span><br><span class="line">    <span class="keyword">if</span>(buffer_zero) <span class="built_in">free</span>(buffer_zero);</span><br><span class="line">    close(fd1);</span><br><span class="line">    close(fd2);</span><br><span class="line">    <span class="keyword">return</span> rev;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(argc &lt; <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s file1 file2\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    my_cp(argv[<span class="number">1</span>], argv[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li>对比测试</li>
</ul>
<p>构造一个文件，除了开头一个空洞，其余数据为0x00,0x01的100000次重复</p>
<p>用优化前的程序拷贝该文件10000次，大约2000s</p>
<p>用优化后的程序拷贝该文件10000次，大约30s</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>UNIX</tag>
      </tags>
  </entry>
  <entry>
    <title>如何编写一个多进程性能测试程序</title>
    <url>/posts/e416d910/</url>
    <content><![CDATA[<div class="note primary">
            <p>在工作中经常碰到需要写一些多进程/多线程的测试程序，用来测试接口的性能。本文将会从零开始一点点增加代码，最终完成一个简易的多进程测试程序编写。该程序支持实时打印测试进结果和最终测试结果的统计。</p><p>同时，本文还涵盖了以下知识点，可以作为学习参考：</p><ul><li>使用<code>getopt_long()</code>处理命令行选项和参数</li><li>使用<code>fork()</code>和<code>wait()</code>处理多进程</li><li>使用<code>sigaction()</code>配合<code>alarm()</code>处理定时信号<code>SIGALRM</code></li><li>使用<code>shmget()</code>、<code>shmat()</code>、<code>shmdt()</code>、<code>shmctl()</code>等通过共享内存进行进程间通信</li><li>使用<code>sigaction()</code>捕获<code>SIGINT</code>和<code>SIGQUIT</code>信号，在程序终止前做共享内存清理工作</li></ul>
          </div>

<span id="more"></span>

<p>本文源码已开源<a href="https://github.com/catbro666/multi-process-test-demo">Github</a></p>
<h1 id="选项和参数的处理"><a href="#选项和参数的处理" class="headerlink" title="选项和参数的处理"></a>选项和参数的处理</h1><p>为了使测试程序更高的可用性，我们<code>getopt</code>来处理选项和参数。</p>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">// printf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span>     <span class="comment">// getopt_long</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>     <span class="comment">// strtol, abort</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>     <span class="comment">// LONG_MIN, LONG_MAX</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ShowHelpInfo</span><span class="params">(<span class="keyword">char</span> *name)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Usage: %s [options]\n\n&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  Options:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -p/--proc         Number of processes (default: 1)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -d/--duration     Duration of test (unit: s, default: 10)\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    -h/--help         Show the help info\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;  Example:\n&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;    %s -p 4 -d 30\n&quot;</span>, name);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> option_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> procs = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> duration = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  定义命令行参数列表，option结构的含义如下（详见 man 3 getopt）：</span></span><br><span class="line"><span class="comment">     *  struct option &#123;</span></span><br><span class="line"><span class="comment">     *      const char *name;       // 参数的完整名称，对应命令中的 --xxx</span></span><br><span class="line"><span class="comment">     *      int  has_arg;           // 该参数是否带有一个值，如 –-config xxx.conf</span></span><br><span class="line"><span class="comment">     *      int *flag;              // 一般设置为NULL</span></span><br><span class="line"><span class="comment">     *      int  val;               // 解析到该参数后getopt_long函数的返回值，</span></span><br><span class="line"><span class="comment">     *                      // 为了方便维护，一般对应getopt_long调用时第三个参数</span></span><br><span class="line"><span class="comment">     *  &#125;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">arg_options</span>[] =</span></span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="string">&quot;proc&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;p&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;duration&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;d&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;help&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注意：传递给getopt_long的第三个参数对应了命令行参数的缩写形式，如-h等，</span></span><br><span class="line"><span class="comment">     *  如果字符后面带有冒号&quot;:&quot;，则说明该参数后跟一个值，如-c xxxxxx</span></span><br><span class="line"><span class="comment">     *  如果开头有冒号&quot;:&quot;，则当一个选项缺少参数时，返回&quot;:&quot;，否则，返回&quot;?&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> ((c = getopt_long(argc, argv, <span class="string">&quot;:p:d:h&quot;</span>, arg_options, &amp;option_index)</span><br><span class="line">            ) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">            ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//fprintf(stdout,&quot;option is -%c, optarv is %s\n&quot;, c, optarg);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">            procs = strtol(optarg, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (procs == LONG_MIN || procs == LONG_MAX) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The number of processes (%s) is overflow\n\n&quot;</span>,</span><br><span class="line">                        optarg);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (procs &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The number of processes must be &gt; 0\n\n&quot;</span>);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            duration = strtol(optarg, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (duration == LONG_MIN || duration == LONG_MAX) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The duration of test (%s) is overflow\n\n&quot;</span>,</span><br><span class="line">                        optarg);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (procs &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;The duration of test must be &gt; 0\n\n&quot;</span>);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Unknown option -%c\n\n&quot;</span>, optopt);</span><br><span class="line">            ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;:&#x27;</span>:</span><br><span class="line">           <span class="built_in">fprintf</span> (<span class="built_in">stderr</span>, <span class="string">&quot;Option -%c requires an argument\n\n&quot;</span>, optopt);</span><br><span class="line">           ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">           <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">abort</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;processes:  %ld\n&quot;</span>, procs);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;duration:   %lds\n&quot;</span>, duration);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n-----------------------------Start Testing----------------------&quot;</span></span><br><span class="line">           <span class="string">&quot;--------\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello world\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

</div></div>



<div class="note info">
            <p>注意：传递给getopt_long的第三个参数对应了命令行参数的缩写形式，如-h, -v, -c等。</p><p>如果字符后面带有冒号”:”，则说明该参数后跟一个值，如-c xxxxxx</p><p>如果开头有冒号”:”，则当一个选项缺少参数时，返回”:”，否则，返回”?”</p>
          </div>



<p><strong>效果如下</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">^_^$ make</span><br><span class="line">gcc <span class="string">&quot;-g&quot;</span> -c multi-process.c -o multi-process.o</span><br><span class="line">gcc  -o <span class="built_in">test</span> multi-process.o</span><br><span class="line"></span><br><span class="line">^_^$ ./<span class="built_in">test</span></span><br><span class="line">processes:  1</span><br><span class="line">duration:   10s</span><br><span class="line"></span><br><span class="line">-----------------------------Start Testing------------------------------</span><br><span class="line"></span><br><span class="line">Hello world</span><br></pre></td></tr></table></figure>



<p><strong>选项或参数错误时</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./test -p</span><br><span class="line">Option -p requires an argument</span><br><span class="line"></span><br><span class="line">Usage: ./test [options]</span><br><span class="line"></span><br><span class="line">  Options:</span><br><span class="line">    -p/--proc         Number of processes (default: 1)</span><br><span class="line">    -d/--duration     Duration of test (unit: s, default: 10)</span><br><span class="line">    -h/--help         Show the help info</span><br><span class="line"></span><br><span class="line">  Example:</span><br><span class="line">    ./test -p 4 -d 30</span><br></pre></td></tr></table></figure>



<h1 id="增加多进程的支持"><a href="#增加多进程的支持" class="headerlink" title="增加多进程的支持"></a>增加多进程的支持</h1><p>主进程<code>fork</code>出n个子进程后<code>wait</code>子进程，子进程则通过<code>sigaction</code>和<code>alarm</code>设置一个定时器，然后进行业务测试。</p>
<p>为了简洁，已经把选项参数处理的部分独立出去了。</p>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">// printf, fprintf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span>   <span class="comment">// wait</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>  <span class="comment">// getpid, wait</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span>     <span class="comment">// sigaction, SIGLARM</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>     <span class="comment">// LONG_MIN, LONG_MAX, ULLONG_MAX</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>     <span class="comment">// getpid</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// memset</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;multi-process.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> isStop = <span class="number">0</span>;             <span class="comment">// 用于标记测试终止</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">param_st</span> &#123;</span>   <span class="comment">// 自定义测试参数</span></span><br><span class="line">    <span class="keyword">long</span> index;</span><br><span class="line">&#125; Param;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_signal_child</span><span class="params">(<span class="keyword">int</span> sigNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sigNum == SIGALRM) &#123;</span><br><span class="line">        isStop = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实际业务测试函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTest</span><span class="params">(<span class="keyword">void</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">    Param *pa = (Param *)param;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; ULLONG_MAX &amp;&amp; !isStop; ++i) &#123;</span><br><span class="line">        <span class="comment">/* DO YOUR WORK */</span></span><br><span class="line">        <span class="comment">/* DO YOUR WORK */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;process [pid = %6u] result: %llu\n&quot;</span>, getpid(), i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rv = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> proc_index = <span class="number">0</span>;</span><br><span class="line">    Options opt;</span><br><span class="line">    <span class="keyword">int</span> isParent = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> wstatus = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act_child</span>;</span></span><br><span class="line"></span><br><span class="line">    rv = process_options(argc, argv, &amp;opt);</span><br><span class="line">    <span class="keyword">if</span> (rv) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;\n-----------------------------Start Testing----------------------&quot;</span></span><br><span class="line">           <span class="string">&quot;--------\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* COMMON INIT */</span></span><br><span class="line">    <span class="comment">/* COMMON INIT */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span>(isParent &amp;&amp; i &lt; opt.procs) &#123;</span><br><span class="line">        pid =  fork();</span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">-1</span>) &#123;         <span class="comment">/* error */</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork failed %d\n&quot;</span>, pid);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;     <span class="comment">/* child */</span></span><br><span class="line">            isParent = <span class="number">0</span>;</span><br><span class="line">            proc_index = i;     <span class="comment">// 记录进程索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;                  <span class="comment">/* parent */</span></span><br><span class="line">        &#125;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isParent) &#123;</span><br><span class="line">        <span class="comment">/* PARENT INIT */</span></span><br><span class="line">        <span class="comment">/* PARENT INIT */</span></span><br><span class="line">        <span class="keyword">for</span>(i =<span class="number">0</span> ; i &lt; opt.procs; ++i) &#123;</span><br><span class="line">            pid = wait(&amp;wstatus);                       <span class="comment">// 等待子进程结束</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;process [pid = %6d] exit\n&quot;</span>, pid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* CHILD INIT */</span></span><br><span class="line">        Param param;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;param, <span class="number">0</span>, <span class="keyword">sizeof</span>(Param));</span><br><span class="line">        param.index = proc_index;</span><br><span class="line">        <span class="comment">/* CHILD INIT */</span></span><br><span class="line"></span><br><span class="line">        act_child.sa_handler = handle_signal_child;</span><br><span class="line">        sigemptyset(&amp;act_child.sa_mask);</span><br><span class="line">        act_child.sa_flags = SA_RESETHAND;</span><br><span class="line">        <span class="comment">/* 用于测试时间到时，通知子进程结束测试 */</span></span><br><span class="line">        rv = sigaction(SIGALRM, &amp;act_child, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (rv) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;sigaction() failed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//signal(SIGALRM, handle_signal_child);</span></span><br><span class="line">        alarm(opt.duration);                            <span class="comment">// 设置测试时长</span></span><br><span class="line">        doTest(&amp;param);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">/* child finished work */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello World!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</div></div>



<p><strong>效果如下</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./test -p 4 -d 2</span><br><span class="line">processes:  4</span><br><span class="line">duration:   2s</span><br><span class="line"></span><br><span class="line">-----------------------------Start Testing------------------------------</span><br><span class="line"></span><br><span class="line">process [pid =  11942] result: 446930553</span><br><span class="line">process [pid =  11942] exit</span><br><span class="line">process [pid =  11939] result: 434385097</span><br><span class="line">process [pid =  11939] exit</span><br><span class="line">process [pid =  11940] result: 442246977</span><br><span class="line">process [pid =  11940] exit</span><br><span class="line">process [pid =  11941] result: 442418811</span><br><span class="line">process [pid =  11941] exit</span><br></pre></td></tr></table></figure>



<p>这样已经可以实现简单的多进程测试，简单起见，示例代码里只是简单地进行了计数操作。读者如果想要进行自己特定的测试，只要在Param中增加需要的测试参数，接着在<code>/* CHILD INIT */</code>处进行参数初始化，然后在<code>/* DO YOUR WORK */</code>处添加实际的测试逻辑即可。</p>
<h1 id="增加实时的结果统计及最终的结果汇总"><a href="#增加实时的结果统计及最终的结果汇总" class="headerlink" title="增加实时的结果统计及最终的结果汇总"></a>增加实时的结果统计及最终的结果汇总</h1><p>为了使测试程序更加人性化，使其可以实时统计测试结果，结束时自动计算总的结果。这就需要引入父子进程间通信，我们选用共享内存的方式来实现。为了避免进程间同步对测试带来的影响，在共享内存中为每个子进程开辟了一个空间，每个子进程根据索引在自己的空间里写数据，由父进程进行结果的汇总。</p>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">// printf, fprintf</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span>   <span class="comment">// wait</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>  <span class="comment">// getpid, wait</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span>    <span class="comment">// shmget, shmat, shmctl, shmdt</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span>    <span class="comment">// shmget, shmat, shmctl, shmdt</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span>     <span class="comment">// sigaction, SIGLARM</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>     <span class="comment">// LONG_MIN, LONG_MAX, ULLONG_MAX</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span>      <span class="comment">// errno</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>     <span class="comment">// getpid</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// memset</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;multi-process.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">param_st</span> &#123;</span>   <span class="comment">// 自定义测试参数</span></span><br><span class="line">    <span class="keyword">long</span> index;</span><br><span class="line">&#125; Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">result_st</span> &#123;</span>   <span class="comment">// 自定义测试结果</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> count;</span><br><span class="line">&#125; Result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> isStop = <span class="number">0</span>;             <span class="comment">// 用于标记测试终止</span></span><br><span class="line">Options opt;                <span class="comment">// 命令行选项</span></span><br><span class="line"><span class="keyword">int</span> shmid;                  <span class="comment">// 共享内存id</span></span><br><span class="line">Result *shm = <span class="literal">NULL</span>;         <span class="comment">// 共享内存地址，用于存放测试结果</span></span><br><span class="line">Result res_total;</span><br><span class="line">Result res_last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_signal_child</span><span class="params">(<span class="keyword">int</span> sigNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sigNum == SIGALRM) &#123;</span><br><span class="line">        isStop = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_signal_parent</span><span class="params">(<span class="keyword">int</span> sigNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sigNum == SIGALRM) &#123;</span><br><span class="line">        <span class="comment">/* DO REAL-TIME STATISTICS */</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;res_total, <span class="number">0</span>, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; opt.procs; ++i) &#123;</span><br><span class="line">            res_total.count += shm[i].count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;total count %12llu,  average %12.0lf/s\n&quot;</span>,</span><br><span class="line">                res_total.count, (res_total.count - res_last.count)</span><br><span class="line">                / (<span class="keyword">double</span>)opt.interval);</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;res_last, &amp;res_total, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        <span class="comment">/* DO REAL-TIME STATISTICS */</span></span><br><span class="line">        alarm(opt.interval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实际业务测试函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTest</span><span class="params">(<span class="keyword">void</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">    Param *pa = (Param *)param;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; ULLONG_MAX &amp;&amp; !isStop; ++i) &#123;</span><br><span class="line">        <span class="comment">/* DO YOUR WORK */</span></span><br><span class="line">        ++shm[pa-&gt;index].count;</span><br><span class="line">        <span class="comment">/* DO YOUR WORK */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rv = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> proc_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> isParent = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> wstatus = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act_child</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act_parent</span>;</span></span><br><span class="line"></span><br><span class="line">    rv = process_options(argc, argv, &amp;opt);</span><br><span class="line">    <span class="keyword">if</span> (rv) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;\n-----------------------------Start Testing-------------&quot;</span></span><br><span class="line">            <span class="string">&quot;-----------------\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* COMMON INIT */</span></span><br><span class="line">    shmid = shmget(IPC_PRIVATE, <span class="keyword">sizeof</span>(<span class="keyword">sizeof</span>(Result) * opt.procs), <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">-1</span> == shmid) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmget() failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmid = %d\n&quot;</span>, shmid);</span><br><span class="line">    shm = (Result*)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> ((<span class="keyword">void</span> *) <span class="number">-1</span> == shm) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;shmat() failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(shm, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">sizeof</span>(Result) * opt.procs));</span><br><span class="line">    <span class="comment">/* COMMON INIT */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(isParent &amp;&amp; i &lt; opt.procs) &#123;</span><br><span class="line">        pid =  fork();</span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">-1</span>) &#123;         <span class="comment">/* error */</span></span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;fork failed %d\n&quot;</span>, pid);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;     <span class="comment">/* child */</span></span><br><span class="line">            isParent = <span class="number">0</span>;</span><br><span class="line">            proc_index = i;     <span class="comment">// 记录进程索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;                  <span class="comment">/* parent */</span></span><br><span class="line">        &#125;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isParent) &#123;</span><br><span class="line">        <span class="comment">/* PARENT INIT */</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;act_parent, <span class="number">0</span>, <span class="keyword">sizeof</span>(act_parent));</span><br><span class="line">        act_parent.sa_handler = handle_signal_parent;</span><br><span class="line">        <span class="comment">/* 使wait被中断时可以自动恢复 */</span></span><br><span class="line">        act_parent.sa_flags = SA_RESTART;</span><br><span class="line">        rv = sigaction(SIGALRM, &amp;act_parent, <span class="literal">NULL</span>);     <span class="comment">// 用于定时统计结果</span></span><br><span class="line">        <span class="comment">//signal(SIGALRM, handle_signal_parent);</span></span><br><span class="line">        <span class="keyword">if</span> (rv) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;sigaction() failed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;res_last, <span class="number">0</span>, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        alarm(opt.interval);</span><br><span class="line">        <span class="comment">/* PARENT INIT */</span></span><br><span class="line">        <span class="comment">/* DO FINAL STATISTICS */</span></span><br><span class="line">        Result <span class="keyword">final</span>;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;<span class="keyword">final</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        <span class="keyword">for</span>(i =<span class="number">0</span> ; i &lt; opt.procs; ++i) &#123;</span><br><span class="line">            pid = wait(&amp;wstatus);                       <span class="comment">// 等待子进程结束</span></span><br><span class="line">            alarm(<span class="number">0</span>);                                   <span class="comment">// 终止定时器</span></span><br><span class="line">            <span class="keyword">if</span>(pid == <span class="number">-1</span>) &#123;</span><br><span class="line">                <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;wait() failed, errno=%d\n&quot;</span>, errno);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;process [pid = %6d] exit\n&quot;</span>, pid);</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;process [pid = %6u] count %12llu in %lus,  &quot;</span></span><br><span class="line">                    <span class="string">&quot;average %12.0lf/s\n&quot;</span>, pid, shm[i].count, opt.duration, </span><br><span class="line">                    shm[i].count / (<span class="keyword">double</span>)opt.duration);</span><br><span class="line">            <span class="keyword">final</span>.count += shm[i].count;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;total count %12llu in %lus,  average %12.0lf/s\n&quot;</span>,</span><br><span class="line">               <span class="keyword">final</span>.count, opt.duration, <span class="keyword">final</span>.count / (<span class="keyword">double</span>)opt.duration);</span><br><span class="line">        <span class="comment">/* DO FINAL STATISTICS */</span></span><br><span class="line">        shmdt((<span class="keyword">void</span>*)shm);</span><br><span class="line">        <span class="comment">/* 子进程退出之后自动detach了, 所以这里不需要通过IPC_STAT进行判断 */</span></span><br><span class="line">        shmctl(shmid, IPC_RMID, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* CHILD INIT */</span></span><br><span class="line">        Param param;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;param, <span class="number">0</span>, <span class="keyword">sizeof</span>(Param));</span><br><span class="line">        param.index = proc_index;</span><br><span class="line">        <span class="comment">/* CHILD INIT */</span></span><br><span class="line"></span><br><span class="line">        act_child.sa_handler = handle_signal_child;</span><br><span class="line">        sigemptyset(&amp;act_child.sa_mask);</span><br><span class="line">        <span class="comment">//sigaddset(&amp;act_child.sa_mask, SIGQUIT);</span></span><br><span class="line">        <span class="comment">//sigaddset(&amp;act_child.sa_mask, SIGTERM);</span></span><br><span class="line">        act_child.sa_flags = SA_RESETHAND;</span><br><span class="line">        <span class="comment">/* 用于测试时间到时，通知子进程结束测试 */</span></span><br><span class="line">        rv = sigaction(SIGALRM, &amp;act_child, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">if</span> (rv) &#123;</span><br><span class="line">            <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">&quot;sigaction() failed\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//signal(SIGALRM, handle_signal_child);</span></span><br><span class="line">        alarm(opt.duration);                            <span class="comment">// 设置测试时长</span></span><br><span class="line">        doTest(&amp;param);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">/* child finished work */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</div></div>



<p><strong>测试效果如下</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">^_^$ ./test -p 4 -d 8 -i 1</span><br><span class="line">processes:  4</span><br><span class="line">duration:   8s</span><br><span class="line">interval:   1s</span><br><span class="line"></span><br><span class="line">-----------------------------Start Testing------------------------------</span><br><span class="line"></span><br><span class="line">shmid = 2654220</span><br><span class="line">total count    344235932,  average    344235932/s</span><br><span class="line">total count    679573681,  average    335337749/s</span><br><span class="line">total count   1026283924,  average    346710243/s</span><br><span class="line">total count   1368302354,  average    342018430/s</span><br><span class="line">total count   1708471662,  average    340169308/s</span><br><span class="line">total count   2057211138,  average    348739476/s</span><br><span class="line">total count   2398403059,  average    341191921/s</span><br><span class="line">process [pid =  25124] exit</span><br><span class="line">process [pid =  25124] count    688504473 in 8s,  average     86063059/s</span><br><span class="line">process [pid =  25123] exit</span><br><span class="line">process [pid =  25123] count    682379115 in 8s,  average     85297389/s</span><br><span class="line">process [pid =  25125] exit</span><br><span class="line">process [pid =  25125] count    682467102 in 8s,  average     85308388/s</span><br><span class="line">process [pid =  25126] exit</span><br><span class="line">process [pid =  25126] count    688159459 in 8s,  average     86019932/s</span><br><span class="line">total count   2741510149 in 8s,  average    342688769/s</span><br></pre></td></tr></table></figure>



<p>这里需要特别提一下<code>wait()</code>和<code>sigaction()</code>系统调用，默认情况下<code>wait()</code>会阻塞直到有任意一个子进程改变了其状态，或者有一个信号处理函数中断了<code>wait()</code>调用。所以我们程序中的<code>wait()</code>调用就会被自己的<code>SIGALRM</code>信号中断，返回<code>-1</code>同时<code>errno</code>为<code>EINTR</code>。这样我们就需要在<code>wait()</code>外面加一层循环来处理<code>wait()</code>被信号中断的情况。</p>
<p>通过在<code>sigaction()</code>时增加<code>SA_RESTART</code>标志，被中断的系统调用可以自动重开，也就省去了那个外层循环。另外，<code>signal()</code>封装了<code>sigaction()</code>，它里面默认就是设置了<code>SA_RESTART</code>，不过除非你有确切的理由，不然不建议使用<code>signal()</code>了。</p>
<h1 id="增加SIGINT和SIGQUIT信号捕获"><a href="#增加SIGINT和SIGQUIT信号捕获" class="headerlink" title="增加SIGINT和SIGQUIT信号捕获"></a>增加SIGINT和SIGQUIT信号捕获</h1><p>截止目前，我们已经完成了多进程的测试及结果统计。但其实还有一个潜在的问题，在实际测试中，我们经常会在测试还没完成时就手动<code>^C</code>终止程序执行。这样我们在程序中申请的共享内存就会得不到释放，造成内存泄漏。所以需要增加对<code>SIGINT</code>和<code>SIGQUIT</code>信号的处理函数，在里面做清理工作，释放共享内存。</p>
<p>如果已经不小心造成了共享内存的泄漏，可以通过如下命令手动进行删除。<code>ipcrm shm &lt;id&gt;</code>，如果是显式指定key的话也可以通过<code>ipcrm -M &lt;key&gt;</code>来进行删除。</p>
<div class="note info">
            <p>今天，突然想到了，其实有一种更加简单的方法，即在<code>shmat()</code>之后立即进行<code>shmctl(shmid, IPC_RMID, 0);</code>。这样不仅简单，而且中间的空窗期也更短，cool！这样我们再也不用担心，<code>^C</code>造成内存泄漏了哈。</p>
          </div>

<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line"><span class="meta">@@ -88,12 +88,14 @@</span> int main(int argc, char *argv[]) &#123;</span><br><span class="line">         fprintf(stderr, &quot;shmget() failed\n&quot;);</span><br><span class="line">         return -1;</span><br><span class="line">     &#125;</span><br><span class="line">     fprintf(stderr, &quot;shmid = %d\n&quot;, shmid);</span><br><span class="line">     shm = (Result*)shmat(shmid, 0, 0);</span><br><span class="line">     if ((void *) -1 == shm) &#123;</span><br><span class="line">         fprintf(stderr, &quot;shmat() failed\n&quot;);</span><br><span class="line">         return -1;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="addition">+    /* 这里直接进行IPC_RMID操作，进程退出后会自动detach了, 从而释放共享内存 */</span></span><br><span class="line"><span class="addition">+    shmctl(shmid, IPC_RMID, 0);</span></span><br><span class="line">     memset(shm, 0, sizeof(sizeof(Result) * opt.procs));</span><br><span class="line">     /* COMMON INIT */</span><br><span class="line"></span><br><span class="line"><span class="meta">@@ -156,10 +135,6 @@</span> int main(int argc, char *argv[]) &#123;</span><br><span class="line">         fprintf(stderr, &quot;total count %12llu in %lus,  average %12.0lf/s\n&quot;,</span><br><span class="line">                final.count, opt.duration, final.count / (double)opt.duration);</span><br><span class="line">         /* DO FINAL STATISTICS */</span><br><span class="line"><span class="deletion">-</span></span><br><span class="line"><span class="deletion">-        shmdt((void*)shm);</span></span><br><span class="line"><span class="deletion">-        /* 子进程退出之后自动detach了, 所以这里不需要通过IPC_STAT进行判断 */</span></span><br><span class="line"><span class="deletion">-        shmctl(shmid, IPC_RMID, 0);</span></span><br><span class="line">     &#125;</span><br><span class="line">     else &#123;</span><br><span class="line">         /* CHILD INIT */</span><br></pre></td></tr></table></figure>



<h1 id="封装错误判断函数"><a href="#封装错误判断函数" class="headerlink" title="封装错误判断函数"></a>封装错误判断函数</h1><p>为了使代码看起来更加简洁，避免每个函数调用后面跟着一个<code>if()&#123;&#125;</code>判断块，我们对错误判断及日志打印函数进行了一个简单的封装。最终的代码如下：</p>
<ul>
<li><code>common.h </code></li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HEADER_COMMON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEADER_COMMON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdbool.h&gt;</span>    <span class="comment">// bool, true, false</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fail_if</span><span class="params">(<span class="keyword">bool</span> condition, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fail</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mylog</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* HEADER_COMMON_H */</span></span></span><br></pre></td></tr></table></figure>
</div></div>
<ul>
<li><code>common.c</code></li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;common.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span>      <span class="comment">// stderr</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span>     <span class="comment">// va_start, vfprintf, va_end</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>     <span class="comment">// exit</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fail_if</span><span class="params">(<span class="keyword">bool</span> condition, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (condition) &#123;</span><br><span class="line">        va_list args;</span><br><span class="line">        va_start(args, fmt);</span><br><span class="line">        <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, fmt, args);</span><br><span class="line">        va_end(args);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fail</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mylog</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span> </span>&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    <span class="built_in">vfprintf</span>(<span class="built_in">stderr</span>, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</div></div>

<ul>
<li><code>opt.h</code></li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> HEADER_OPT_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> HEADER_OPT_H</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">options_st</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> procs;                 <span class="comment">// 进程数</span></span><br><span class="line">    <span class="keyword">long</span> duration;              <span class="comment">// 测试时间</span></span><br><span class="line">    <span class="keyword">long</span> interval;              <span class="comment">// 统计间隔</span></span><br><span class="line">&#125; Options;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 处理参数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process_options</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], Options *opt)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">/* HEADER_OPT_H */</span></span></span><br></pre></td></tr></table></figure>



</div></div>

<ul>
<li><code>opt.c</code></li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>     <span class="comment">// LONG_MIN, LONG_MAX, ULLONG_MAX</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// memset</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span>     <span class="comment">// strtol, abort</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;getopt.h&gt;</span>     <span class="comment">// geropt_long</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;common.h&quot;</span>     <span class="comment">// mylog</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ShowHelpInfo</span><span class="params">(<span class="keyword">char</span> *name)</span> </span>&#123;</span><br><span class="line">    mylog(<span class="string">&quot;Usage: %s [options]\n\n&quot;</span>, name);</span><br><span class="line">    mylog(<span class="string">&quot;  Options:\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;    -p/--proc         Number of processes (default: 1)\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;    -d/--duration     Duration of test (unit: s, default: 10)\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;    -i/--interval     Interval of statisics (unit: s, default: 1)\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;    -h/--help         Show the help info\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;  Example:\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;    %s -p 4 -d 30 -i 2\n&quot;</span>, name);</span><br><span class="line">    mylog(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 处理参数 */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">process_options</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[], Options *opt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> option_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> procs = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> duration = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">long</span> interval = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  定义命令行参数列表，option结构的含义如下（详见 man 3 getopt）：</span></span><br><span class="line"><span class="comment">     *  struct option &#123;</span></span><br><span class="line"><span class="comment">     *      const char *name;       // 参数的完整名称，对应命令中的 --xxx</span></span><br><span class="line"><span class="comment">     *      int  has_arg;           // 该参数是否带有一个值，如 –config xxx.conf</span></span><br><span class="line"><span class="comment">     *      int *flag;              // 一般设置为NULL</span></span><br><span class="line"><span class="comment">     *      int  val;               // 解析到该参数后getopt_long函数的返回值，</span></span><br><span class="line"><span class="comment">     *                      // 为了方便维护，一般对应getopt_long调用时第三个参数</span></span><br><span class="line"><span class="comment">     *  &#125;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">option</span> <span class="title">arg_options</span>[] =</span></span><br><span class="line">    &#123;</span><br><span class="line">        &#123;<span class="string">&quot;proc&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;p&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;duration&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;d&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;duration&quot;</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="string">&#x27;i&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;help&quot;</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  注意：传递给getopt_long的第三个参数对应了命令行参数的缩写形式，如-h等，</span></span><br><span class="line"><span class="comment">     *  如果字符后面带有冒号&quot;:&quot;，则说明该参数后跟一个值，如-c xxxxxx</span></span><br><span class="line"><span class="comment">     *  如果开头有冒号&quot;:&quot;，则当一个选项缺少参数时，返回&quot;:&quot;，否则，返回&quot;?&quot;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> ((c = getopt_long(argc, argv, <span class="string">&quot;:p:d:i:h&quot;</span>, arg_options, &amp;option_index)</span><br><span class="line">            ) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (c) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">            ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="comment">//fprintf(stderr,&quot;option is -%c, optarv is %s\n&quot;, c, optarg);</span></span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;p&#x27;</span>:</span><br><span class="line">            procs = strtol(optarg, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (procs == LONG_MIN || procs == LONG_MAX) &#123;</span><br><span class="line">                mylog(<span class="string">&quot;The number of processes (%s) is overflow\n\n&quot;</span>, optarg);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (procs &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mylog(<span class="string">&quot;The number of processes must be &gt; 0\n\n&quot;</span>);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            duration = strtol(optarg, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (duration == LONG_MIN || duration == LONG_MAX) &#123;</span><br><span class="line">                mylog(<span class="string">&quot;The duration of test (%s) is overflow\n\n&quot;</span>, optarg);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">             <span class="keyword">else</span> <span class="keyword">if</span> (procs &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mylog(<span class="string">&quot;The duration of test must be &gt; 0\n\n&quot;</span>);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;i&#x27;</span>:</span><br><span class="line">            interval = strtol(optarg, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">if</span> (interval == LONG_MIN || interval == LONG_MAX) &#123;</span><br><span class="line">                mylog(<span class="string">&quot;The interval of statistics (%s) is overflow\n\n&quot;</span>, </span><br><span class="line">                      optarg);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (procs &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                mylog(<span class="string">&quot;The interval of statistics must be &gt; 0\n\n&quot;</span>);</span><br><span class="line">                ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;?&#x27;</span>:</span><br><span class="line">            mylog(<span class="string">&quot;Unknown option -%c\n\n&quot;</span>, optopt);</span><br><span class="line">            ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;:&#x27;</span>:</span><br><span class="line">            mylog(<span class="string">&quot;Option -%c requires an argument\n\n&quot;</span>, optopt);</span><br><span class="line">            ShowHelpInfo(argv[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mylog(<span class="string">&quot;processes:  %ld\n&quot;</span>, procs);</span><br><span class="line">    mylog(<span class="string">&quot;duration:   %lds\n&quot;</span>, duration);</span><br><span class="line">    mylog(<span class="string">&quot;interval:   %lds\n&quot;</span>, interval);</span><br><span class="line">    <span class="built_in">memset</span>(opt, <span class="number">0</span>, <span class="keyword">sizeof</span>(Options));</span><br><span class="line">    opt-&gt;procs = procs;</span><br><span class="line">    opt-&gt;duration = duration;</span><br><span class="line">    opt-&gt;interval = interval;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</div></div>

<ul>
<li><code>multi-process.c</code></li>
</ul>
<div><div class="fold_hider"><div class="close hider_title">点击展开代码</div></div><div class="fold">
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span>   <span class="comment">// wait</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span>  <span class="comment">// getpid, wait</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span>    <span class="comment">// shmget, shmat, shmctl, shmdt</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span>    <span class="comment">// shmget, shmat, shmctl, shmdt</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span>     <span class="comment">// sigaction, SIGLARM</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits.h&gt;</span>     <span class="comment">// LONG_MIN, LONG_MAX, ULLONG_MAX</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span>      <span class="comment">// errno</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span>     <span class="comment">// getpid</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span>     <span class="comment">// memset</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;common.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;opt.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">param_st</span> &#123;</span>   <span class="comment">// 自定义测试参数</span></span><br><span class="line">    <span class="keyword">long</span> index;</span><br><span class="line">&#125; Param;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">result_st</span> &#123;</span>   <span class="comment">// 自定义测试结果</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> count;</span><br><span class="line">&#125; Result;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> isStop = <span class="number">0</span>;             <span class="comment">// 用于标记测试终止</span></span><br><span class="line">Options opt;                <span class="comment">// 命令行选项</span></span><br><span class="line"><span class="keyword">int</span> shmid;                  <span class="comment">// 共享内存id</span></span><br><span class="line">Result *shm = <span class="literal">NULL</span>;         <span class="comment">// 共享内存地址，用于存放测试结果</span></span><br><span class="line">Result res_total;</span><br><span class="line">Result res_last;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_signal_child</span><span class="params">(<span class="keyword">int</span> sigNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sigNum == SIGALRM) &#123;</span><br><span class="line">        isStop = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">handle_signal_parent</span><span class="params">(<span class="keyword">int</span> sigNum)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (sigNum == SIGALRM) &#123;</span><br><span class="line">        <span class="comment">/* DO REAL-TIME STATISTICS */</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;res_total, <span class="number">0</span>, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">long</span> i = <span class="number">0</span>; i &lt; opt.procs; ++i) &#123;</span><br><span class="line">            res_total.count += shm[i].count;</span><br><span class="line">        &#125;</span><br><span class="line">        mylog(<span class="string">&quot;total count %12llu,  average %12.0lf/s\n&quot;</span>,</span><br><span class="line">                res_total.count, (res_total.count - res_last.count)</span><br><span class="line">                / (<span class="keyword">double</span>)opt.interval);</span><br><span class="line">        <span class="built_in">memcpy</span>(&amp;res_last, &amp;res_total, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        <span class="comment">/* DO REAL-TIME STATISTICS */</span></span><br><span class="line">        alarm(opt.interval);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 实际业务测试函数 */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doTest</span><span class="params">(<span class="keyword">void</span> *param)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">    Param *pa = (Param *)param;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; ULLONG_MAX &amp;&amp; !isStop; ++i) &#123;</span><br><span class="line">        <span class="comment">/* DO YOUR WORK */</span></span><br><span class="line">        ++shm[pa-&gt;index].count;</span><br><span class="line">        <span class="comment">/* DO YOUR WORK */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> rv = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> proc_index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> isParent = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> wstatus = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">pid_t</span> pid = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act_child</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sigaction</span> <span class="title">act_parent</span>;</span></span><br><span class="line"></span><br><span class="line">    rv = process_options(argc, argv, &amp;opt);</span><br><span class="line">    <span class="keyword">if</span> (rv) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mylog(<span class="string">&quot;\n-----------------------------Start Testing-----------------------&quot;</span></span><br><span class="line">          <span class="string">&quot;-------\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/* COMMON INIT */</span></span><br><span class="line">    shmid = shmget(IPC_PRIVATE, <span class="keyword">sizeof</span>(<span class="keyword">sizeof</span>(Result) * opt.procs), <span class="number">0666</span>);</span><br><span class="line">    fail_if(<span class="number">-1</span> == shmid, <span class="string">&quot;shmget() failed\n&quot;</span>);</span><br><span class="line">    mylog(<span class="string">&quot;shmid = %d\n&quot;</span>, shmid);</span><br><span class="line">    shm = (Result*)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    fail_if((<span class="keyword">void</span> *) <span class="number">-1</span> == shm, <span class="string">&quot;shmat() failed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* 这里直接进行IPC_RMID操作，进程退出之后会自动detach了, 从而释放共享内存 */</span></span><br><span class="line">    shmctl(shmid, IPC_RMID, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">memset</span>(shm, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">sizeof</span>(Result) * opt.procs));</span><br><span class="line">    <span class="comment">/* COMMON INIT */</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(isParent &amp;&amp; i &lt; opt.procs) &#123;</span><br><span class="line">        pid =  fork();</span><br><span class="line">        fail_if(<span class="number">-1</span> == pid, <span class="string">&quot;fork failed %d\n&quot;</span>, pid);    <span class="comment">/* error */</span></span><br><span class="line">        <span class="keyword">if</span>(pid == <span class="number">0</span>) &#123;                                  <span class="comment">/* child */</span></span><br><span class="line">            isParent = <span class="number">0</span>;</span><br><span class="line">            proc_index = i;     <span class="comment">// 记录进程索引</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;                                          <span class="comment">/* parent */</span></span><br><span class="line">        &#125;</span><br><span class="line">        ++i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(isParent) &#123;</span><br><span class="line">        <span class="comment">/* PARENT INIT */</span></span><br><span class="line">        <span class="built_in">memset</span>(&amp;act_parent, <span class="number">0</span>, <span class="keyword">sizeof</span>(act_parent));</span><br><span class="line">        act_parent.sa_handler = handle_signal_parent;</span><br><span class="line">        <span class="comment">/* 使wait被中断时可以自动恢复 */</span></span><br><span class="line">        act_parent.sa_flags = SA_RESTART;</span><br><span class="line">        rv = sigaction(SIGALRM, &amp;act_parent, <span class="literal">NULL</span>);     <span class="comment">// 用于定时统计结果</span></span><br><span class="line">        fail_if(rv, <span class="string">&quot;sigaction() failed\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(&amp;res_last, <span class="number">0</span>, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        alarm(opt.interval);</span><br><span class="line">        <span class="comment">/* PARENT INIT */</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/* DO FINAL STATISTICS */</span></span><br><span class="line">        Result <span class="keyword">final</span>;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;<span class="keyword">final</span>, <span class="number">0</span>, <span class="keyword">sizeof</span>(Result));</span><br><span class="line">        <span class="keyword">for</span>(i =<span class="number">0</span> ; i &lt; opt.procs; ++i) &#123;</span><br><span class="line">            pid = wait(&amp;wstatus);                       <span class="comment">// 等待子进程结束</span></span><br><span class="line">            alarm(<span class="number">0</span>);                                   <span class="comment">// 终止定时器</span></span><br><span class="line">            fail_if(<span class="number">-1</span> == pid, <span class="string">&quot;wait() failed, errno=%d\n&quot;</span>, errno);</span><br><span class="line">            mylog(<span class="string">&quot;process [pid = %6d] exit\n&quot;</span>, pid);</span><br><span class="line">            mylog(<span class="string">&quot;process [pid = %6u] count %12llu in %lus,  &quot;</span></span><br><span class="line">                  <span class="string">&quot;average %12.0lf/s\n&quot;</span>, pid, shm[i].count, opt.duration, </span><br><span class="line">                  shm[i].count / (<span class="keyword">double</span>)opt.duration);</span><br><span class="line">            <span class="keyword">final</span>.count += shm[i].count;</span><br><span class="line">        &#125;</span><br><span class="line">        mylog(<span class="string">&quot;total count %12llu in %lus,  average %12.0lf/s\n&quot;</span>,</span><br><span class="line">               <span class="keyword">final</span>.count, opt.duration, <span class="keyword">final</span>.count / (<span class="keyword">double</span>)opt.duration);</span><br><span class="line">        <span class="comment">/* DO FINAL STATISTICS */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">/* CHILD INIT */</span></span><br><span class="line">        Param param;</span><br><span class="line">        <span class="built_in">memset</span>(&amp;param, <span class="number">0</span>, <span class="keyword">sizeof</span>(Param));</span><br><span class="line">        param.index = proc_index;</span><br><span class="line">        <span class="comment">/* CHILD INIT */</span></span><br><span class="line"></span><br><span class="line">        act_child.sa_handler = handle_signal_child;</span><br><span class="line">        sigemptyset(&amp;act_child.sa_mask);</span><br><span class="line">        act_child.sa_flags = SA_RESETHAND;</span><br><span class="line">        <span class="comment">/* 用于测试时间到时，通知子进程结束测试 */</span></span><br><span class="line">        rv = sigaction(SIGALRM, &amp;act_child, <span class="literal">NULL</span>);</span><br><span class="line">        fail_if(rv, <span class="string">&quot;sigaction() failed\n&quot;</span>);</span><br><span class="line">        alarm(opt.duration);                            <span class="comment">// 设置测试时长</span></span><br><span class="line">        doTest(&amp;param);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;       <span class="comment">/* child finished work */</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



</div></div>


<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>至此，一个多进程的测试程序就算完成了。读者可以根据自身测试需要，增加命令行参数、测试参数和测试结果字段。<br>在<code>COMMON INIT</code>、<code>PARENT INIT</code>和<code>CHILD INIT</code>处分别进行公共的初始化工作和父子进程特定的初始化工作。<br>然后在<code>DO REAL-TIME STATISTICS</code>和<code>DO FINAL STATISTICS</code>处进行测试结果的统计。</p>
]]></content>
      <categories>
        <category>技术向</category>
      </categories>
      <tags>
        <tag>多进程</tag>
        <tag>信号</tag>
        <tag>共享内存</tag>
      </tags>
  </entry>
</search>
